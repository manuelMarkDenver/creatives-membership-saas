generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Tenant {
  id                    String                 @id @default(uuid())
  name                  String
  slug                  String                 @unique
  category              BusinessCategory
  logoUrl               String?
  address               String?
  phoneNumber           String?
  email                 String?
  primaryColor          String?
  secondaryColor        String?
  websiteUrl            String?
  description           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  freeBranchOverride    Int                    @default(0)
  paidModeEnabled       Boolean                @default(false) // Global paid mode toggle
  freeUnitsLimit        Int                    @default(1) // How many free units allowed
  trialDurationDays     Int                    @default(28) // Default trial duration
  branches              Branch[]
  businessUnits         BusinessUnit[]
  customerSubscriptions CustomerSubscription[]
  customerTransactions  CustomerTransaction[]
  membershipPlans       MembershipPlan[]
  platformRevenues      PlatformRevenue[]
  users                 User[]
}

model Branch {
  id                    String                 @id @default(uuid())
  tenantId              String
  name                  String
  address               String?
  phoneNumber           String?
  email                 String?
  isActive              Boolean                @default(true)
  branchData            Json?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerSubscriptions CustomerSubscription[]
  subscriptions         Subscription[]
  userBranches          UserBranch[]

  @@unique([tenantId, name])
}

model BusinessUnit {
  id                    String                 @id @default(uuid())
  tenantId              String
  name                  String
  unitType              BusinessUnitType       @default(LOCATION) // LOCATION for gyms, CHANNEL for ecommerce
  address               String?
  phoneNumber           String?
  email                 String?
  isActive              Boolean                @default(true)
  isPaid                Boolean                @default(false) // For paid mode toggle
  trialEndsAt           DateTime?              // When trial expires
  subscriptionTier      String?                @default("basic") // basic, premium, enterprise
  monthlyPrice          Decimal?               @default(3999) @db.Decimal(8, 2) // PHP pricing
  businessUnitData      Json?                  // Business-specific configuration
  settings              Json?                  // Unit-specific settings
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  saasSubscriptions     SaasSubscription[]     // SaaS subscriptions for this unit

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([unitType])
  @@index([isPaid])
  @@index([trialEndsAt])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  price         Decimal
  billingCycle  BillingCycle
  description   String?
  isActive      Boolean        @default(true)
  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  branchId  String
  planId    String
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  payments  Payment[]
  branch    Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  plan      Plan               @relation(fields: [planId], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  amount         Decimal
  paymentDate    DateTime      @default(now())
  status         PaymentStatus @default(PENDING)
  paymentMethod  String?
  transactionId  String?       @unique
  receiptUrl     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(uuid())
  tenantId              String?
  firstName             String
  lastName              String
  email                 String?                @unique
  phoneNumber           String?
  role                  Role                   @default(GYM_MEMBER)
  isActive              Boolean                @default(true)
  notes                 String?
  photoUrl              String?
  businessData          Json?
  deletedAt             DateTime?
  deletedBy             String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  name                  String?
  password              String?
  customerSubscriptions CustomerSubscription[] @relation("CustomerSubscriptions")
  customerTransactions  CustomerTransaction[]  @relation("CustomerTransactions")
  processedTransactions CustomerTransaction[]  @relation("ProcessedTransactions")
  memberAuditLogs       MemberAuditLog[]       @relation("MemberAuditLogs")
  performedAuditLogs    MemberAuditLog[]       @relation("PerformedAuditLogs")
  deletedByUser         User?                  @relation("UserDeletions", fields: [deletedBy], references: [id])
  deletedUsers          User[]                 @relation("UserDeletions")
  tenant                Tenant?                @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userBranches          UserBranch[]
}

model UserBranch {
  id          String      @id @default(uuid())
  userId      String
  branchId    String
  accessLevel AccessLevel @default(STAFF_ACCESS)
  isPrimary   Boolean     @default(false)
  permissions Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  branch      Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId])
}

model MembershipPlan {
  id                    String                 @id @default(uuid())
  tenantId              String
  name                  String
  description           String?
  price                 Decimal
  duration              Int
  type                  MembershipType
  benefits              Json?
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  customerSubscriptions CustomerSubscription[]
  tenant                Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, name])
}

model CustomerTransaction {
  id                   String            @id @default(uuid())
  tenantId             String
  customerId           String
  businessType         String            @default("gym")
  transactionCategory  String            @default("membership")
  amount               Decimal           @db.Decimal(12, 2)
  currency             String?           @default("PHP")
  taxAmount            Decimal?          @default(0) @db.Decimal(12, 2)
  discountAmount       Decimal?          @default(0) @db.Decimal(12, 2)
  netAmount            Decimal           @db.Decimal(12, 2)
  paymentMethod        String?           @default("cash")
  paymentReference     String?
  gatewayTransactionId String?
  transactionType      TransactionType   @default(PAYMENT)
  status               TransactionStatus @default(COMPLETED)
  relatedEntityType    String?
  relatedEntityId      String?
  relatedEntityName    String?
  description          String?
  notes                String?
  metadata             Json?
  processedBy          String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  customer             User              @relation("CustomerTransactions", fields: [customerId], references: [id], onDelete: Cascade)
  processor            User?             @relation("ProcessedTransactions", fields: [processedBy], references: [id])
  tenant               Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  platformRevenue      PlatformRevenue[]

  @@index([tenantId])
  @@index([customerId])
  @@index([businessType])
  @@index([createdAt])
  @@index([status])
  @@index([amount])
}

model CustomerSubscription {
  id                 String                     @id @default(uuid())
  tenantId           String
  branchId           String?
  customerId         String
  membershipPlanId   String
  status             CustomerSubscriptionStatus @default(ACTIVE)
  startDate          DateTime                   @db.Date
  endDate            DateTime                   @db.Date
  price              Decimal                    @db.Decimal(12, 2)
  currency           String?                    @default("PHP")
  usageData          Json?
  cancelledAt        DateTime?
  cancellationReason String?
  cancellationNotes  String?
  autoRenew          Boolean?                   @default(true)
  nextBillingDate    DateTime?                  @db.Date
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime                   @updatedAt
  branch             Branch?                    @relation(fields: [branchId], references: [id])
  customer           User                       @relation("CustomerSubscriptions", fields: [customerId], references: [id], onDelete: Cascade)
  membershipPlan     MembershipPlan             @relation(fields: [membershipPlanId], references: [id])
  tenant             Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([branchId])
  @@index([customerId])
  @@index([membershipPlanId])
  @@index([status])
  @@index([endDate])
}

model PlatformRevenue {
  id                  String               @id @default(uuid())
  tenantId            String
  tenantName          String
  businessType        String
  revenueType         String
  amount              Decimal              @db.Decimal(12, 2)
  currency            String?              @default("PHP")
  billingPeriodStart  DateTime?            @db.Date
  billingPeriodEnd    DateTime?            @db.Date
  paymentStatus       String?              @default("pending")
  paymentDate         DateTime?
  paymentMethod       String?
  paymentReference    String?
  sourceTransactionId String?
  subscriptionPlanId  String?
  description         String?
  notes               String?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  sourceTransaction   CustomerTransaction? @relation(fields: [sourceTransactionId], references: [id])
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([createdAt])
  @@index([revenueType])
  @@index([paymentStatus])
}

model MemberAuditLog {
  id            String            @id @default(uuid())
  memberId      String
  action        MemberAuditAction
  reason        String?
  notes         String?
  previousState String?
  newState      String?
  performedBy   String?
  performedAt   DateTime          @default(now())
  metadata      Json?
  createdAt     DateTime          @default(now())
  member        User              @relation("MemberAuditLogs", fields: [memberId], references: [id], onDelete: Cascade)
  performer     User?             @relation("PerformedAuditLogs", fields: [performedBy], references: [id])

  @@index([memberId])
  @@index([performedAt])
  @@index([action])
}

model SaasSubscription {
  id                    String                 @id @default(uuid())
  businessUnitId        String
  planName              String                 @default("basic") // basic, premium, enterprise
  status                SaasSubscriptionStatus @default(TRIAL)
  startDate             DateTime               @db.Date
  endDate               DateTime?              @db.Date
  trialEndsAt           DateTime?              @db.Date
  monthlyPrice          Decimal                @default(3999) @db.Decimal(8, 2) // PHP pricing
  currency              String                 @default("PHP")
  paymentMethod         String?                // gcash, paymongo, bank_transfer
  paymentReference      String?                // Reference from payment gateway
  lastPaymentDate       DateTime?
  nextBillingDate       DateTime?              @db.Date
  autoRenew             Boolean                @default(true)
  cancelledAt           DateTime?
  cancellationReason    String?
  metadata              Json?                  // Additional subscription data
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  businessUnit          BusinessUnit           @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)

  @@index([businessUnitId])
  @@index([status])
  @@index([endDate])
  @@index([nextBillingDate])
  @@index([trialEndsAt])
}

enum BusinessCategory {
  GYM
  COFFEE_SHOP
  ECOMMERCE
  OTHER
}

enum Role {
  SUPER_ADMIN
  OWNER
  MANAGER
  STAFF
  GYM_TRAINER
  GYM_NUTRITIONIST
  GYM_FRONT_DESK
  GYM_MAINTENANCE
  GYM_MEMBER
  STORE_MANAGER
  PRODUCT_MANAGER
  INVENTORY_MANAGER
  CUSTOMER_SERVICE
  MARKETING_MANAGER
  FULFILLMENT_STAFF
  VENDOR
  ECOM_CUSTOMER
  COFFEE_MANAGER
  BARISTA
  CASHIER
  BAKER
  SHIFT_SUPERVISOR
  COFFEE_CUSTOMER
}

enum AccessLevel {
  FULL_ACCESS
  MANAGER_ACCESS
  STAFF_ACCESS
  READ_ONLY
}

enum PlanType {
  TRIAL
  PAID
}

enum BillingCycle {
  TRIAL
  MONTHLY
  YEARLY
  ONE_TIME
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum MembershipType {
  DAY_PASS
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  UNLIMITED
  STUDENT
  SENIOR
  CORPORATE
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
  REVERSAL
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum CustomerSubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
  PENDING_ACTIVATION
}

enum MemberAuditAction {
  ACCOUNT_CREATED
  ACCOUNT_ACTIVATED
  ACCOUNT_DEACTIVATED
  ACCOUNT_DELETED
  ACCOUNT_RESTORED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_RENEWED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_EXPIRED
  SUBSCRIPTION_SUSPENDED
  SUBSCRIPTION_RESUMED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  PROFILE_UPDATED
  PROFILE_PHOTO_UPDATED
  FACILITY_ACCESS_GRANTED
  FACILITY_ACCESS_REVOKED
  LOGIN_SUCCESSFUL
  LOGIN_FAILED
}

enum BusinessUnitType {
  LOCATION      // Physical locations (gyms, coffee shops)
  CHANNEL       // Sales channels (ecommerce stores)
  DEPARTMENT    // Departments within a business
  FRANCHISE     // Franchise units
}

enum SaasSubscriptionStatus {
  TRIAL         // Free trial period
  ACTIVE        // Paid and active
  PAST_DUE      // Payment failed, grace period
  SUSPENDED     // Temporarily suspended
  CANCELLED     // User cancelled
  EXPIRED       // Trial or subscription expired
}
