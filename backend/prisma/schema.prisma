generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model Tenant {
  id                     String                  @id @default(uuid())
  name                   String
  slug                   String                  @unique
  category               BusinessCategory
  status                 TenantStatus            @default(PENDING) // PENDING until email verified
  logoUrl                String?
  address                String?
  phoneNumber            String?
  email                  String?
  primaryColor           String?
  secondaryColor         String?
  websiteUrl             String?
  description            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  freeBranchOverride     Int                     @default(0)
  onboardingCompletedAt  DateTime?               // When tenant completed initial setup
  ownerPasswordChanged   Boolean                 @default(false) // Track if owner changed from temp password
  paidModeEnabled        Boolean                 @default(false) // Global paid mode toggle
  freeUnitsLimit         Int                     @default(1) // How many free units allowed
  trialDurationDays      Int                     @default(28) // Default trial duration
  branches               Branch[]
  businessUnits          BusinessUnit[]
  gymMemberSubscriptions GymMemberSubscription[]
  customerTransactions   CustomerTransaction[]
  gymMembershipPlans     GymMembershipPlan[]     // Gym-specific plans
  platformRevenues       PlatformRevenue[]
  users                  User[]
  gymMemberProfiles      GymMemberProfile[]
  coffeeCustomerProfiles CoffeeCustomerProfile[]
  gymUserBranches        GymUserBranch[]
}

model Branch {
  id                     String                  @id @default(uuid())
  tenantId               String
  name                   String
  address                String?
  phoneNumber            String?
  email                  String?
  isActive               Boolean                 @default(true)
  isMainBranch           Boolean                 @default(false)
  branchData             Json?
  
  // Audit fields
  createdAt              DateTime                @default(now())
  createdBy              String?                 // User ID who created
  updatedAt              DateTime                @updatedAt
  deletedAt              DateTime?               // Soft delete timestamp
  deletedBy              String?                 // User ID who deleted
  
  tenant                 Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gymMemberSubscriptions GymMemberSubscription[]
  subscriptions          Subscription[]
  gymUserBranches        GymUserBranch[]
  
  // Audit relations
  createdByUser          User?                   @relation("BranchCreatedBy", fields: [createdBy], references: [id])
  deletedByUser          User?                   @relation("BranchDeletedBy", fields: [deletedBy], references: [id])
  
  // Primary branch relationships
  primaryMemberProfiles  GymMemberProfile[]      @relation("PrimaryBranchProfiles")

  @@unique([tenantId, name])
  @@index([deletedAt])
}

model BusinessUnit {
  id                String             @id @default(uuid())
  tenantId          String
  name              String
  unitType          BusinessUnitType   @default(LOCATION) // LOCATION for gyms, CHANNEL for ecommerce
  address           String?
  phoneNumber       String?
  email             String?
  isActive          Boolean            @default(true)
  isPaid            Boolean            @default(false) // For paid mode toggle
  trialEndsAt       DateTime? // When trial expires
  subscriptionTier  String?            @default("basic") // basic, premium, enterprise
  monthlyPrice      Decimal?           @default(3999) @db.Decimal(8, 2) // PHP pricing
  businessUnitData  Json? // Business-specific configuration
  settings          Json? // Unit-specific settings
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  tenant            Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  saasSubscriptions SaasSubscription[] // SaaS subscriptions for this unit

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([unitType])
  @@index([isPaid])
  @@index([trialEndsAt])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  price         Decimal
  billingCycle  BillingCycle
  description   String?
  isActive      Boolean        @default(true)
  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  branchId  String
  planId    String
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  payments  Payment[]
  branch    Branch             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  plan      Plan               @relation(fields: [planId], references: [id])
}

model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  amount         Decimal
  paymentDate    DateTime      @default(now())
  status         PaymentStatus @default(PENDING)
  paymentMethod  String?
  transactionId  String?       @unique
  receiptUrl     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                  @id @default(uuid())
  firstName                 String
  lastName                  String
  email                     String?                 @unique
  phoneNumber               String?
  notes                     String?
  photoUrl                  String? // Main profile photo
  photos                    Json?   // Array of additional photo URLs for future features
  role                      Role?   // Platform-level roles (SUPER_ADMIN, OWNER, MANAGER, STAFF)
  tenantId                  String? // Current tenant context
  businessData              Json?
  deletedAt                 DateTime?
  deletedBy                 String?
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  password                  String?
  initialPasswordSet        Boolean                 @default(false) // Track if user has set their own password
  
  // Email verification fields
  emailVerified             Boolean                 @default(false)
  emailVerificationToken    String?                 @unique
  emailVerificationExpiry   DateTime?
  emailVerifiedAt           DateTime?
  tenant                 Tenant?                 @relation(fields: [tenantId], references: [id])
  gymMemberSubscriptions GymMemberSubscription[] @relation("GymMemberSubscriptions")
  customerTransactions   CustomerTransaction[]   @relation("CustomerTransactions")
  processedTransactions  CustomerTransaction[]   @relation("ProcessedTransactions")
  memberAuditLogs        MemberAuditLog[]        @relation("MemberAuditLogs")
  performedAuditLogs     MemberAuditLog[]        @relation("PerformedAuditLogs")
  deletedByUser          User?                 @relation("UserDeletions", fields: [deletedBy], references: [id])
  deletedUsers           User[]                @relation("UserDeletions")
  deletedGymPlans        GymMembershipPlan[]   @relation("DeletedGymPlans")
  gymUserBranches        GymUserBranch[]
  gymMemberProfile       GymMemberProfile?
  coffeeCustomerProfile  CoffeeCustomerProfile?
  
  // Branch audit relations
  createdBranches        Branch[]              @relation("BranchCreatedBy")
  deletedBranches        Branch[]              @relation("BranchDeletedBy")
}

model GymUserBranch {
  id          String      @id @default(uuid())
  userId      String
  branchId    String
  tenantId    String
  accessLevel AccessLevel @default(STAFF_ACCESS)
  isPrimary   Boolean     @default(false)
  permissions Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  branch      Branch      @relation(fields: [branchId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, branchId])
  @@index([tenantId])
}

 model GymMemberProfile {
  id                String   @id @default(uuid())
  userId            String   @unique // One profile per user (across all tenants)
  tenantId          String
  
  // Primary branch relationship
  primaryBranchId   String?  // Where member signed up/pays membership
  accessLevel       BranchAccessLevel @default(ALL_BRANCHES) // Default: can visit all branches
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant            Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  primaryBranch     Branch?  @relation("PrimaryBranchProfiles", fields: [primaryBranchId], references: [id])

  // Business-specific fields
  role              GymRole  @default(GYM_MEMBER)
  status            GymMemberSubscriptionStatus @default(ACTIVE)

   // Gym-specific fields
   emergencyContactName     String?
   emergencyContactPhone    String?
   emergencyContactRelation String?
   medicalConditions String?
   fitnessGoals      String?
   preferredTrainer  String?
   trainerContactNumber     String?

  // Profile fields
  gender             String?
  height             Int?
  weight             Int?
  allergies          Json? // Array of strings
  lastVisit          DateTime?
  dateOfBirth        DateTime?
  totalVisits        Int?     @default(0)
  fitnessLevel       String?
  notifications      Json? // Object with sms, push, email
  favoriteEquipment  String?
  averageVisitsPerWeek Int?
   preferredWorkoutTime String?

   joinedDate         DateTime? // Date when member first joined the gym

   membershipHistory  Json? // Past memberships, achievements, etc.
   profileMetadata    Json? // For any additional dynamic data

   // Gym-level soft deletion
   deletedAt         DateTime?
   deletedBy         String?
   deletionReason    String?
   deletionNotes     String?

   createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([tenantId])
}

model CoffeeCustomerProfile {
  id                  String     @id @default(uuid())
  userId              String     @unique // One profile per user (across all tenants)
  tenantId            String
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant              Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Business-specific fields
  role                CoffeeRole @default(COFFEE_CUSTOMER)
  status              String     @default("active")

  // Coffee shop-specific fields
  favoriteDrinks      String[]
  dietaryPreferences  String?
  loyaltyPoints       Int      @default(0)
  visitHistory        Json?

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([tenantId])
}

// SaaS Platform Plans (what tenants pay us for using the platform)
model SaasTenantPlan {
  id                    String             @id @default(uuid())
  name                  String             @unique // "Basic", "Pro", "Enterprise"
  displayName           String             // "Basic Plan", "Professional Plan"
  description           String?
  monthlyPrice          Decimal            @db.Decimal(8, 2) // What tenant pays us monthly
  yearlyPrice           Decimal?           @db.Decimal(8, 2) // Optional yearly pricing
  maxMembers            Int                @default(100) // Member limit per tenant
  maxBranches           Int                @default(1)   // Branch limit per tenant  
  features              Json?              // Array of features: ["analytics", "integrations"]
  isActive              Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  saasSubscriptions     SaasSubscription[] // Tenant subscriptions to this plan
}

// Business Unit SaaS Subscriptions - using existing model below

// Gym-specific membership plans (what gym members pay the gym)
model GymMembershipPlan {
  id                     String                  @id @default(uuid())
  tenantId               String
  name                   String
  description            String?
  price                  Decimal                 @db.Decimal(8, 2)
  duration               Int                     // Duration in days
  type                   MembershipType
  benefits               Json?                   // Array of benefits
  accessLevel            BranchAccessLevel       @default(ALL_BRANCHES) // Branch access level for this plan
  isActive               Boolean                 @default(true)
  
  // Soft delete fields (matching GymMemberProfile pattern)
  deletedAt              DateTime?
  deletedBy              String?                 // User ID who deleted
  deleteReason           String?                 // Reason for deletion
  deleteNotes            String?                 // Additional notes
  
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  
  // Relations
  gymMemberSubscriptions GymMemberSubscription[]
  tenant                 Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  deletedByUser          User?                   @relation("DeletedGymPlans", fields: [deletedBy], references: [id])

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([isActive])
  @@index([deletedAt])
}


model CustomerTransaction {
  id                      String                     @id @default(uuid())
  tenantId                String
  customerId              String
  gymMemberSubscriptionId String?                    // Link to gym subscription for analytics
  businessType            String                     @default("gym")
  transactionCategory     String                     @default("membership")
  amount                  Decimal                    @db.Decimal(12, 2)
  currency                String?                    @default("PHP")
  taxAmount               Decimal?                   @default(0) @db.Decimal(12, 2)
  discountAmount          Decimal?                   @default(0) @db.Decimal(12, 2)
  netAmount               Decimal                    @db.Decimal(12, 2)
  paymentMethod           String?                    @default("cash")
  paymentReference        String?
  gatewayTransactionId    String?
  transactionType         TransactionType            @default(PAYMENT)
  status                  TransactionStatus          @default(COMPLETED)
  relatedEntityType       String?
  relatedEntityId         String?
  relatedEntityName       String?
  description             String?
  notes                   String?
  metadata                Json?
  processedBy             String?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  customer                User                       @relation("CustomerTransactions", fields: [customerId], references: [id], onDelete: Cascade)
  processor               User?                      @relation("ProcessedTransactions", fields: [processedBy], references: [id])
  tenant                  Tenant                     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  gymMemberSubscription   GymMemberSubscription?     @relation(fields: [gymMemberSubscriptionId], references: [id])
  platformRevenue         PlatformRevenue[]

  @@index([tenantId])
  @@index([customerId])
  @@index([gymMemberSubscriptionId])
  @@index([businessType])
  @@index([createdAt])
  @@index([status])
  @@index([amount])
}

model GymMemberSubscription {
  id                    String                      @id @default(uuid())
  tenantId              String
  branchId              String?
  memberId              String
  gymMembershipPlanId   String                      // Gym-specific plan ID (required)
  status                GymMemberSubscriptionStatus @default(ACTIVE)
  startDate             DateTime                    @db.Date
  endDate               DateTime                    @db.Date
  price                 Decimal                     @db.Decimal(12, 2)
  currency              String?                     @default("PHP")
  usageData             Json?
  cancelledAt           DateTime?
  cancellationReason    String?
  cancellationNotes     String?
  autoRenew             Boolean?                    @default(true)
  nextBillingDate       DateTime?                   @db.Date
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  branch                Branch?                     @relation(fields: [branchId], references: [id])
  member                User                        @relation("GymMemberSubscriptions", fields: [memberId], references: [id], onDelete: Cascade)
  gymMembershipPlan     GymMembershipPlan           @relation(fields: [gymMembershipPlanId], references: [id])  
  tenant                Tenant                      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  customerTransactions  CustomerTransaction[]       // Payment transactions for this subscription

  @@index([tenantId])
  @@index([branchId])
  @@index([memberId])
  @@index([gymMembershipPlanId])
  @@index([status])
  @@index([endDate])
}

model PlatformRevenue {
  id                  String               @id @default(uuid())
  tenantId            String
  tenantName          String
  businessType        String
  revenueType         String
  amount              Decimal              @db.Decimal(12, 2)
  currency            String?              @default("PHP")
  billingPeriodStart  DateTime?            @db.Date
  billingPeriodEnd    DateTime?            @db.Date
  paymentStatus       String?              @default("pending")
  paymentDate         DateTime?
  paymentMethod       String?
  paymentReference    String?
  sourceTransactionId String?
  subscriptionPlanId  String?
  description         String?
  notes               String?
  metadata            Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  sourceTransaction   CustomerTransaction? @relation(fields: [sourceTransactionId], references: [id])
  tenant              Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@index([createdAt])
  @@index([revenueType])
  @@index([paymentStatus])
}

model MemberAuditLog {
  id            String            @id @default(uuid())
  memberId      String
  action        MemberAuditAction
  reason        String?
  notes         String?
  previousState String?
  newState      String?
  performedBy   String?
  performedAt   DateTime          @default(now())
  metadata      Json?
  createdAt     DateTime          @default(now())
  member        User              @relation("MemberAuditLogs", fields: [memberId], references: [id], onDelete: Cascade)
  performer     User?             @relation("PerformedAuditLogs", fields: [performedBy], references: [id])

  @@index([memberId])
  @@index([performedAt])
  @@index([action])
}

model SaasSubscription {
  id                 String                 @id @default(uuid())
  businessUnitId     String
  saasPlanId         String?                // Reference to SaasTenantPlan
  planName           String                 @default("basic") // basic, premium, enterprise - legacy
  status             SaasSubscriptionStatus @default(TRIAL)
  startDate          DateTime               @db.Date
  endDate            DateTime?              @db.Date
  trialEndsAt        DateTime?              @db.Date
  monthlyPrice       Decimal                @default(3999) @db.Decimal(8, 2) // PHP pricing
  currency           String                 @default("PHP")
  paymentMethod      String? // gcash, paymongo, bank_transfer
  paymentReference   String? // Reference from payment gateway
  lastPaymentDate    DateTime?
  nextBillingDate    DateTime?              @db.Date
  autoRenew          Boolean                @default(true)
  cancelledAt        DateTime?
  cancellationReason String?
  metadata           Json? // Additional subscription data
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  businessUnit       BusinessUnit           @relation(fields: [businessUnitId], references: [id], onDelete: Cascade)
  saasPlan           SaasTenantPlan?        @relation(fields: [saasPlanId], references: [id])

  @@index([businessUnitId])
  @@index([saasPlanId])
  @@index([status])
  @@index([endDate])
  @@index([nextBillingDate])
  @@index([trialEndsAt])
}

enum BusinessCategory {
  GYM
  COFFEE_SHOP
  ECOMMERCE
  OTHER
}

enum TenantStatus {
  PENDING    // Email not verified yet
  ACTIVE     // Email verified, can use system
  SUSPENDED  // Admin suspended
  CANCELLED  // Owner cancelled
}

// Global roles for platform-wide access
enum Role {
  SUPER_ADMIN
  OWNER
  MANAGER
  STAFF
  CLIENT
}

// Business-specific role enums
enum GymRole {
  GYM_TRAINER
  GYM_NUTRITIONIST
  GYM_FRONT_DESK
  GYM_MAINTENANCE
  GYM_MEMBER
}

enum CoffeeRole {
  COFFEE_MANAGER
  BARISTA
  CASHIER
  BAKER
  SHIFT_SUPERVISOR
  COFFEE_CUSTOMER
}

enum EcommerceRole {
  STORE_MANAGER
  PRODUCT_MANAGER
  INVENTORY_MANAGER
  CUSTOMER_SERVICE
  MARKETING_MANAGER
  FULFILLMENT_STAFF
  VENDOR
  ECOM_CUSTOMER
}

enum AccessLevel {
  FULL_ACCESS
  MANAGER_ACCESS
  STAFF_ACCESS
  READ_ONLY
}

enum PlanType {
  TRIAL
  PAID
}

enum BillingCycle {
  TRIAL
  MONTHLY
  YEARLY
  ONE_TIME
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

enum MembershipType {
  DAY_PASS
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  UNLIMITED
  STUDENT
  SENIOR
  CORPORATE
}

enum TransactionType {
  PAYMENT
  REFUND
  ADJUSTMENT
  REVERSAL
  CHARGEBACK
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum GymMemberSubscriptionStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
  PENDING_ACTIVATION
  NO_SUBSCRIPTION
}

enum MemberAuditAction {
  ACCOUNT_CREATED
  ACCOUNT_ACTIVATED
  ACCOUNT_DEACTIVATED
  ACCOUNT_DELETED
  ACCOUNT_RESTORED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_RENEWED
  SUBSCRIPTION_CANCELLED
  SUBSCRIPTION_EXPIRED
  SUBSCRIPTION_SUSPENDED
  SUBSCRIPTION_RESUMED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PAYMENT_REFUNDED
  PROFILE_UPDATED
  PROFILE_PHOTO_UPDATED
  FACILITY_ACCESS_GRANTED
  FACILITY_ACCESS_REVOKED
  LOGIN_SUCCESSFUL
  LOGIN_FAILED
}

enum BusinessUnitType {
  LOCATION // Physical locations (gyms, coffee shops)
  CHANNEL // Sales channels (ecommerce stores)
  DEPARTMENT // Departments within a business
  FRANCHISE // Franchise units
}

enum SaasSubscriptionStatus {
  TRIAL // Free trial period
  ACTIVE // Paid and active
  PAST_DUE // Payment failed, grace period
  SUSPENDED // Temporarily suspended
  CANCELLED // User cancelled
  EXPIRED // Trial or subscription expired
}

enum BranchAccessLevel {
  SINGLE_BRANCH    // Can only visit primary branch
  MULTI_BRANCH     // Can visit specific allowed branches
  ALL_BRANCHES     // Can visit any branch (premium memberships)
}
