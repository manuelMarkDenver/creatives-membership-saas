{
  "collection": {
    "_": {
      "exporter_id": "creatives-saas-api"
    },
    "item": [
      {
        "id": "075b441f-915b-47f5-8505-39ac1d840811",
        "name": "Health Check",
        "item": [
          {
            "id": "061fd3b8-eef6-4f0c-a53b-6781b92d1e0a",
            "name": "API Health Check",
            "request": {
              "url": {
                "path": [
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7d1d0d17-d484-47c9-9cd2-d716b32875d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response contains Hello World\", function () {",
                    "    pm.expect(pm.response.text()).to.include(\"Hello World\");",
                    "});"
                  ],
                  "_lastExecutionId": "882407cc-6b29-450f-a26c-eecb53c4dbb4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "610b0a2a-2687-414d-84a3-3fc0f49646f9",
        "name": "Tenants",
        "item": [
          {
            "id": "95eb90cd-116a-4c67-9fb5-c48afef9774f",
            "name": "Create or Find Gym Tenant",
            "request": {
              "url": {
                "path": [
                  "tenants"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"{{uniqueGymName}}\",\n  \"category\": \"GYM\",\n  \"address\": \"123 Test Fitness Street, Makati City\",\n  \"phoneNumber\": \"+63 2 8555 9999\",\n  \"email\": \"test@testgym.com\",\n  \"primaryColor\": \"#FF6B35\",\n  \"secondaryColor\": \"#2E3440\",\n  \"websiteUrl\": \"https://www.testgym.com\",\n  \"description\": \"Test gym for API testing.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "acc7deb3-2e04-49a1-b538-74a4a9946081",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 201 or 409 (already exists)\", function () {",
                    "    pm.expect([201, 409]).to.include(pm.response.code);",
                    "});",
                    "",
                    "pm.test(\"Response handled correctly\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    ",
                    "    if (pm.response.code === 201) {",
                    "        // New tenant created",
                    "        pm.expect(jsonData).to.have.property('id');",
                    "        pm.expect(jsonData).to.have.property('name');",
                    "        pm.expect(jsonData).to.have.property('category');",
                    "        pm.expect(jsonData.category).to.eql('GYM');",
                    "        pm.environment.set('gymTenantId', jsonData.id);",
                    "    } else if (pm.response.code === 409) {",
                    "        // Tenant already exists, get the existing one",
                    "        pm.sendRequest({",
                    "            url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "            method: 'GET'",
                    "        }, function (err, response) {",
                    "            if (!err && response.code === 200) {",
                    "                const tenants = response.json();",
                    "                const gymTenant = tenants.find(t => t.name === 'Fitness Elite Gym' || t.category === 'GYM');",
                    "                if (gymTenant) {",
                    "                    pm.environment.set('gymTenantId', gymTenant.id);",
                    "                }",
                    "            }",
                    "        });",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Tenant has correct properties (if created)\", function () {",
                    "    if (pm.response.code === 201) {",
                    "        const jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('slug');",
                    "        pm.expect(jsonData).to.have.property('createdAt');",
                    "        pm.expect(jsonData).to.have.property('updatedAt');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "86588c09-cc7e-4116-a0d1-c91b9cfd8b29"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "773426f0-81c7-488f-8803-661df96fc3b1",
                  "type": "text/javascript",
                  "exec": [
                    "// Use a unique name to avoid conflicts",
                    "const timestamp = Date.now();",
                    "pm.environment.set('uniqueGymName', 'Test Gym ' + timestamp);"
                  ],
                  "_lastExecutionId": "bf461012-977b-4e54-9107-f2443007f105"
                }
              }
            ]
          },
          {
            "id": "58b6f08f-dd33-4073-ad39-40741c46981c",
            "name": "Create Coffee Shop Tenant",
            "request": {
              "url": {
                "path": [
                  "tenants"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Bean & Brew Cafe\",\n  \"category\": \"COFFEE_SHOP\",\n  \"address\": \"456 Coffee Lane, BGC Taguig\",\n  \"phoneNumber\": \"+63 2 8777 5678\",\n  \"email\": \"hello@beanbrew.com\",\n  \"primaryColor\": \"#8B4513\",\n  \"secondaryColor\": \"#FFF8DC\",\n  \"websiteUrl\": \"https://www.beanbrew.com\",\n  \"description\": \"Artisanal coffee shop serving the finest locally-sourced beans.\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "51c1eb7f-e400-4068-85ab-f589584b8cb2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response has tenant ID\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    pm.expect(jsonData.category).to.eql('COFFEE_SHOP');",
                    "    ",
                    "    // Store tenant ID for subsequent requests",
                    "    pm.environment.set('coffeeShopTenantId', jsonData.id);",
                    "});"
                  ],
                  "_lastExecutionId": "4643c56b-53b4-4137-9d7b-e6cf59b774eb"
                }
              }
            ]
          },
          {
            "id": "1837bafd-bd97-4a7e-94c2-5534f7688acc",
            "name": "Get All Tenants",
            "request": {
              "url": {
                "path": [
                  "tenants"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "818df34c-e9cc-4bb1-b16f-81d22319192e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "pm.test(\"Each tenant has required fields\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.length > 0) {",
                    "        jsonData.forEach(tenant => {",
                    "            pm.expect(tenant).to.have.property('id');",
                    "            pm.expect(tenant).to.have.property('name');",
                    "            pm.expect(tenant).to.have.property('category');",
                    "            pm.expect(tenant).to.have.property('_count');",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "ebba784a-2a78-44f0-aecf-fbbb06ec40f8"
                }
              }
            ]
          },
          {
            "id": "6c7d2943-fb34-4296-bd68-e2e32a98c67c",
            "name": "Get Gym Tenants Only",
            "request": {
              "url": {
                "path": [
                  "tenants"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "category",
                    "value": "GYM"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f3260483-4d2f-43ad-81fc-0c5186400913",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"All tenants are GYM category\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    jsonData.forEach(tenant => {",
                    "        pm.expect(tenant.category).to.eql('GYM');",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "86f14072-848b-4046-bf87-db032fe246b5"
                }
              }
            ]
          },
          {
            "id": "ee097d37-e758-4088-9f6e-b52b552caeac",
            "name": "Get Tenant by ID",
            "request": {
              "url": {
                "path": [
                  "tenants",
                  "{{gymTenantId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "09e56756-595b-4631-b67a-f1613ee28396",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have a gymTenantId set",
                    "if (!pm.environment.get('gymTenantId')) {",
                    "    // Get the first GYM tenant as fallback",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const tenants = response.json();",
                    "            if (tenants.length > 0) {",
                    "                pm.environment.set('gymTenantId', tenants[0].id);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "433f3c87-08d8-4a72-8817-98e9ed97bcbe"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0b8d4cfd-02fe-44a2-8a03-c875a033f1d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has tenant details\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    pm.expect(jsonData).to.have.property('name');",
                    "    pm.expect(jsonData).to.have.property('_count');",
                    "});"
                  ],
                  "_lastExecutionId": "cad2131e-c7da-41b6-ac63-2621370723a0"
                }
              }
            ]
          },
          {
            "id": "1a1b466b-4213-4cef-8eb9-2caf43de86b4",
            "name": "Update Tenant",
            "request": {
              "url": {
                "path": [
                  "tenants",
                  "{{gymTenantId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"description\": \"Test Updated: Premium fitness center with state-of-the-art equipment and professional trainers.\",\n  \"primaryColor\": \"#FF4500\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "65561f82-5d3e-4691-9079-e82f7af097b3",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have a gymTenantId set",
                    "if (!pm.environment.get('gymTenantId')) {",
                    "    // Get the first GYM tenant as fallback",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const tenants = response.json();",
                    "            if (tenants.length > 0) {",
                    "                pm.environment.set('gymTenantId', tenants[0].id);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "8c6d03bd-0687-4586-b8bc-4cb4135a102f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d1d2d8d-ef19-4993-8fed-aeed9c2c48fa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Tenant was updated\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.description).to.include('Test Updated');",
                    "});"
                  ],
                  "_lastExecutionId": "788d8077-66e8-42dc-a374-5b111d6d2a16"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
        "name": "Users (Gym)",
        "item": [
          {
            "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
            "name": "Create Gym Member",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have a gymTenantId set",
                    "if (!pm.environment.get('gymTenantId')) {",
                    "    console.log('No gymTenantId found, attempting to get one...');",
                    "    // Get the first GYM tenant as fallback",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const tenants = response.json();",
                    "            if (tenants.length > 0) {",
                    "                pm.environment.set('gymTenantId', tenants[0].id);",
                    "                console.log('Set gymTenantId to:', tenants[0].id);",
                    "            }",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "// Generate unique email to avoid conflicts",
                    "const timestamp = Date.now();",
                    "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                  ],
                  "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response has user ID\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    pm.expect(jsonData).to.have.property('firstName');",
                    "    pm.expect(jsonData).to.have.property('lastName');",
                    "    pm.expect(jsonData).to.have.property('tenant');",
                    "    ",
                    "    // Store user ID for subsequent requests",
                    "    pm.environment.set('gymUserId', jsonData.id);",
                    "});",
                    "",
                    "pm.test(\"User belongs to gym tenant\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                    "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                    "});",
                    "",
                    "pm.test(\"Business data contains gym-specific info\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('businessData');",
                    "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                    "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                    "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                    "});"
                  ],
                  "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                }
              }
            ]
          },
          {
            "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
            "name": "Create Another Gym Member",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have a gymTenantId set",
                    "if (!pm.environment.get('gymTenantId')) {",
                    "    // Get the first GYM tenant as fallback",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const tenants = response.json();",
                    "            if (tenants.length > 0) {",
                    "                pm.environment.set('gymTenantId', tenants[0].id);",
                    "            }",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "// Generate unique email to avoid conflicts",
                    "const timestamp = Date.now();",
                    "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                  ],
                  "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response has user ID\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.environment.set('gymUserId2', jsonData.id);",
                    "});"
                  ],
                  "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                }
              }
            ]
          },
          {
            "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
            "name": "Get All Users (Admin)",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response is array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "pm.test(\"Users have tenant information\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.length > 0) {",
                    "        jsonData.forEach(user => {",
                    "            pm.expect(user).to.have.property('id');",
                    "            pm.expect(user).to.have.property('firstName');",
                    "            pm.expect(user).to.have.property('tenant');",
                    "            pm.expect(user.tenant).to.have.property('name');",
                    "            pm.expect(user.tenant).to.have.property('category');",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                }
              }
            ]
          },
          {
            "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
            "name": "Get Users by Tenant",
            "request": {
              "url": {
                "path": [
                  "users",
                  "tenant",
                  "{{gymTenantId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have a gymTenantId set",
                    "if (!pm.environment.get('gymTenantId')) {",
                    "    // Get the first GYM tenant as fallback",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const tenants = response.json();",
                    "            if (tenants.length > 0) {",
                    "                pm.environment.set('gymTenantId', tenants[0].id);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"All users belong to correct tenant\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const expectedTenantId = pm.environment.get('gymTenantId');",
                    "    jsonData.forEach(user => {",
                    "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                }
              }
            ]
          },
          {
            "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
            "name": "Get User by ID",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{gymUserId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have necessary IDs set",
                    "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                    "    // Get existing users to set IDs",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/users',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const users = response.json();",
                    "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                    "            if (gymUser) {",
                    "                pm.environment.set('gymUserId', gymUser.id);",
                    "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response has user details\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    pm.expect(jsonData).to.have.property('firstName');",
                    "    pm.expect(jsonData).to.have.property('tenant');",
                    "    pm.expect(jsonData).to.have.property('businessData');",
                    "});"
                  ],
                  "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                }
              }
            ]
          },
          {
            "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
            "name": "Update User",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{gymUserId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have necessary IDs set",
                    "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                    "    // Get existing users to set IDs",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/users',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const users = response.json();",
                    "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                    "            if (gymUser) {",
                    "                pm.environment.set('gymUserId', gymUser.id);",
                    "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"User was updated\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                    "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                    "});"
                  ],
                  "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "bbcaf616-dff5-49de-b176-09b07b8a1ea3",
        "name": "Error Testing",
        "item": [
          {
            "id": "0e3dd9fa-b91c-43e3-afcc-a818cd093ffe",
            "name": "Try to Create User for Coffee Shop (Should Fail)",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "x-tenant-id",
                  "value": "{{coffeeShopTenantId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"tenantId\": \"{{coffeeShopTenantId}}\",\n  \"firstName\": \"Coffee\",\n  \"lastName\": \"Lover\",\n  \"email\": \"coffee@example.com\",\n  \"role\": \"CUSTOMER\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e6849f42-8e51-446a-9406-f230b1591b66",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 403 (Forbidden)\", function () {",
                    "    pm.response.to.have.status(403);",
                    "});",
                    "",
                    "pm.test(\"Error message mentions business type restriction\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('GYM');",
                    "});"
                  ],
                  "_lastExecutionId": "d7d5c9e1-d9da-4ef6-b064-1fdf2517dca3"
                }
              }
            ]
          },
          {
            "id": "d74179c8-e044-49fb-b287-6648d08e4786",
            "name": "Invalid Tenant ID",
            "request": {
              "url": {
                "path": [
                  "tenants",
                  "invalid-id"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "69bb48d9-7a0c-4fdb-b3d7-d33103ee3b4c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 (Bad Request)\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Error message mentions invalid format\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('Invalid tenant ID format');",
                    "});"
                  ],
                  "_lastExecutionId": "8094bce1-4275-406c-b442-9e30f0b12410"
                }
              }
            ]
          },
          {
            "id": "98e6d362-8133-4e58-8d9e-807035c1de5e",
            "name": "Missing Tenant ID in Header",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@example.com\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "da3eb31c-38d2-4326-942e-520772c79d0d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 404 (Not Found)\", function () {",
                    "    pm.response.to.have.status(404);",
                    "});",
                    "",
                    "pm.test(\"Error message mentions tenant ID required\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.include('Tenant ID is required');",
                    "});"
                  ],
                  "_lastExecutionId": "0ddfade9-fccb-49a5-8182-a3b40a6b9cb9"
                }
              }
            ]
          },
          {
            "id": "c26bd321-7b9c-4756-ad3d-29a9e1483b60",
            "name": "Invalid Email Format",
            "request": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15cac5a5-d3cb-442f-9c4f-be6660f71c78",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 400 (Bad Request)\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Error message mentions invalid email\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    // Check for either our custom message or class-validator message",
                    "    const message = Array.isArray(jsonData.message) ? jsonData.message.join(' ') : jsonData.message;",
                    "    pm.expect(message).to.satisfy(msg => msg.includes('Invalid email format') || msg.includes('email must be an email'));",
                    "});"
                  ],
                  "_lastExecutionId": "5cfed4f4-cf23-41ed-8901-348647ae8d96"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ef26aa3f-2910-4087-a302-46973df3c33a",
        "name": "Cleanup",
        "item": [
          {
            "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
            "name": "Delete Test User",
            "request": {
              "url": {
                "path": [
                  "users",
                  "{{gymUserId2}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-tenant-id",
                  "value": "{{gymTenantId}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                  "type": "text/javascript",
                  "exec": [
                    "// Ensure we have necessary IDs set for deletion",
                    "if (!pm.environment.get('gymUserId2')) {",
                    "    // Get existing users to set ID for second user",
                    "    pm.sendRequest({",
                    "        url: pm.environment.get('baseUrl') + '/users',",
                    "        method: 'GET'",
                    "    }, function (err, response) {",
                    "        if (!err && response.code === 200) {",
                    "            const users = response.json();",
                    "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                    "            if (gymUsers.length > 1) {",
                    "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                    "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                    "            } else if (gymUsers.length > 0) {",
                    "                // Fallback to first user if only one exists",
                    "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                    "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                    "            }",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"User was deleted\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
                }
              }
            ]
          },
          {
            "id": "77c8049e-ac12-46eb-aa7b-42fa2044ad45",
            "name": "Delete Test Tenant",
            "request": {
              "url": {
                "path": [
                  "tenants",
                  "{{coffeeShopTenantId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "66cbec8d-c69a-4ccc-8f41-3563f564e7e4",
                  "type": "text/javascript",
                  "exec": [
                    "// Skip this test if we don't have a coffee shop tenant to delete",
                    "if (!pm.environment.get('coffeeShopTenantId')) {",
                    "    console.log('No coffeeShopTenantId found, skipping deletion test');",
                    "    pm.execution.skipRequest();",
                    "}"
                  ],
                  "_lastExecutionId": "0b6e198d-9bb3-471b-8126-01d90f962fa1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "95c48d5b-f3f1-4d71-9e63-2bd569587fb5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Tenant was deleted\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "});"
                  ],
                  "_lastExecutionId": "0bea9d64-9121-4216-8a68-62b54545e95d"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "851cba12-ac01-4d97-9872-3202169ab80a",
          "type": "text/javascript",
          "exec": [
            "// Global pre-request script",
            "console.log('Running request to:', pm.request.url.toString());",
            "",
            "// Add bypass auth header for local testing",
            "pm.request.headers.add({",
            "  key: 'x-bypass-auth',",
            "  value: pm.environment.get('bypassAuth') || 'true'",
            "});"
          ],
          "_lastExecutionId": "78a95b2e-c780-4501-a1b0-50b3ca9e03f6"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "0ceab8e9-9e76-44a5-8611-916d1f1156e8",
          "type": "text/javascript",
          "exec": [
            "// Global test script",
            "pm.test(\"Response time is less than 2000ms\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(2000);",
            "});",
            "",
            "pm.test(\"Response has correct Content-Type\", function () {",
            "    if (pm.response.code !== 404 && !pm.request.url.toString().endsWith('/')) {",
            "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
            "    }",
            "});"
          ],
          "_lastExecutionId": "246cd5f0-b1d4-4e60-a4e6-0afb280db1d7"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "http://localhost:5000",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "fa3d44eb-54b6-44e6-98bb-5a88d00bc9ea",
      "name": "Creatives SaaS API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Multi-tenant SaaS API for managing different business types (Gym, Coffee Shop, E-commerce)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment"
    },
    "id": "creatives-saas-env",
    "name": "Creatives SaaS Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:5000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86",
        "key": "gymTenantId"
      },
      {
        "type": "any",
        "value": "d34f2b2b-2d01-4efc-907c-e6a8b3c2cff9",
        "key": "coffeeShopTenantId"
      },
      {
        "type": "any",
        "value": "",
        "key": "gymUserId"
      },
      {
        "type": "any",
        "value": null,
        "key": "gymUserId2"
      },
      {
        "type": "any",
        "value": "v1",
        "key": "apiVersion"
      },
      {
        "type": "any",
        "value": "true",
        "key": "bypassAuth"
      },
      {
        "type": "any",
        "value": "Test Gym 1754332788441",
        "key": "uniqueGymName"
      },
      {
        "type": "any",
        "value": "testuser1754332789730@example.com",
        "key": "uniqueEmail"
      },
      {
        "type": "any",
        "value": "testuser21754332789915@example.com",
        "key": "uniqueEmail2"
      }
    ]
  },
  "globals": {
    "id": "cd080bce-051e-4caa-b044-c64a42e23ea9",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 19,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 67,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 19,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 22,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 19,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 81,
        "pending": 0,
        "failed": 10
      },
      "testScripts": {
        "total": 38,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 29,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.36363636363637,
      "responseMin": 2,
      "responseMax": 149,
      "responseSd": 45.11454659031372,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1754332788174,
      "completed": 1754332791912
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 19,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ed21e0c-9bec-4872-b5b8-2dc86646b896",
          "httpRequestId": "c96e4e3e-c8e6-4a24-a3b6-70d1b7c54d30"
        },
        "item": {
          "id": "061fd3b8-eef6-4f0c-a53b-6781b92d1e0a",
          "name": "API Health Check",
          "request": {
            "url": {
              "path": [
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7d1d0d17-d484-47c9-9cd2-d716b32875d5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains Hello World\", function () {",
                  "    pm.expect(pm.response.text()).to.include(\"Hello World\");",
                  "});"
                ],
                "_lastExecutionId": "882407cc-6b29-450f-a26c-eecb53c4dbb4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aac74c54-f370-4da0-b812-28f8cfb3f7ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "995f1a1b-488f-4919-a42e-d0b188de7935",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "12"
            },
            {
              "key": "ETag",
              "value": "W/\"c-Lve95gjOVATpfV8EL5X4nxwjKHE\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:48 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              72,
              101,
              108,
              108,
              111,
              32,
              87,
              111,
              114,
              108,
              100,
              33
            ]
          },
          "cookie": [],
          "responseTime": 14,
          "responseSize": 12
        },
        "id": "061fd3b8-eef6-4f0c-a53b-6781b92d1e0a",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains Hello World",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "de9f7dd2-cb36-4fbb-8ac4-f3a40356b0d1",
          "length": 19,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fa26b019-f1d3-4758-9963-e8158819236d"
        },
        "item": {
          "id": "95eb90cd-116a-4c67-9fb5-c48afef9774f",
          "name": "Create or Find Gym Tenant",
          "request": {
            "url": {
              "path": [
                "tenants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{uniqueGymName}}\",\n  \"category\": \"GYM\",\n  \"address\": \"123 Test Fitness Street, Makati City\",\n  \"phoneNumber\": \"+63 2 8555 9999\",\n  \"email\": \"test@testgym.com\",\n  \"primaryColor\": \"#FF6B35\",\n  \"secondaryColor\": \"#2E3440\",\n  \"websiteUrl\": \"https://www.testgym.com\",\n  \"description\": \"Test gym for API testing.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "acc7deb3-2e04-49a1-b538-74a4a9946081",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201 or 409 (already exists)\", function () {",
                  "    pm.expect([201, 409]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test(\"Response handled correctly\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    ",
                  "    if (pm.response.code === 201) {",
                  "        // New tenant created",
                  "        pm.expect(jsonData).to.have.property('id');",
                  "        pm.expect(jsonData).to.have.property('name');",
                  "        pm.expect(jsonData).to.have.property('category');",
                  "        pm.expect(jsonData.category).to.eql('GYM');",
                  "        pm.environment.set('gymTenantId', jsonData.id);",
                  "    } else if (pm.response.code === 409) {",
                  "        // Tenant already exists, get the existing one",
                  "        pm.sendRequest({",
                  "            url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "            method: 'GET'",
                  "        }, function (err, response) {",
                  "            if (!err && response.code === 200) {",
                  "                const tenants = response.json();",
                  "                const gymTenant = tenants.find(t => t.name === 'Fitness Elite Gym' || t.category === 'GYM');",
                  "                if (gymTenant) {",
                  "                    pm.environment.set('gymTenantId', gymTenant.id);",
                  "                }",
                  "            }",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Tenant has correct properties (if created)\", function () {",
                  "    if (pm.response.code === 201) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('slug');",
                  "        pm.expect(jsonData).to.have.property('createdAt');",
                  "        pm.expect(jsonData).to.have.property('updatedAt');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "86588c09-cc7e-4116-a0d1-c91b9cfd8b29"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "773426f0-81c7-488f-8803-661df96fc3b1",
                "type": "text/javascript",
                "exec": [
                  "// Use a unique name to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueGymName', 'Test Gym ' + timestamp);"
                ],
                "_lastExecutionId": "bf461012-977b-4e54-9107-f2443007f105"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c4cdc3d1-153e-4c6c-a041-399d1c88e859",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "328",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Test Gym 1754332788441\",\n  \"category\": \"GYM\",\n  \"address\": \"123 Test Fitness Street, Makati City\",\n  \"phoneNumber\": \"+63 2 8555 9999\",\n  \"email\": \"test@testgym.com\",\n  \"primaryColor\": \"#FF6B35\",\n  \"secondaryColor\": \"#2E3440\",\n  \"websiteUrl\": \"https://www.testgym.com\",\n  \"description\": \"Test gym for API testing.\"\n}"
          }
        },
        "response": {
          "id": "22609af2-92e3-45d8-b1cb-b0892bea5b07",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "460"
            },
            {
              "key": "ETag",
              "value": "W/\"1cc-laYc8YG9crfowlEVEaZCUzxjuuY\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:48 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              102,
              54,
              50,
              54,
              99,
              100,
              45,
              54,
              48,
              100,
              55,
              45,
              52,
              48,
              100,
              100,
              45,
              57,
              51,
              54,
              50,
              45,
              101,
              97,
              53,
              102,
              98,
              55,
              54,
              55,
              53,
              100,
              56,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              54,
              66,
              51,
              53,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              103,
              121,
              109,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 149,
          "responseSize": 460
        },
        "id": "95eb90cd-116a-4c67-9fb5-c48afef9774f",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 201 or 409 (already exists)",
            "skipped": false
          },
          {
            "assertion": "Response handled correctly",
            "skipped": false
          },
          {
            "assertion": "Tenant has correct properties (if created)",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "47768910-a729-4c0f-b2ab-fa8c4b8aab23",
          "length": 19,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "ce2206f9-1a00-4b84-98bc-6d339062ea46"
        },
        "item": {
          "id": "58b6f08f-dd33-4073-ad39-40741c46981c",
          "name": "Create Coffee Shop Tenant",
          "request": {
            "url": {
              "path": [
                "tenants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Bean & Brew Cafe\",\n  \"category\": \"COFFEE_SHOP\",\n  \"address\": \"456 Coffee Lane, BGC Taguig\",\n  \"phoneNumber\": \"+63 2 8777 5678\",\n  \"email\": \"hello@beanbrew.com\",\n  \"primaryColor\": \"#8B4513\",\n  \"secondaryColor\": \"#FFF8DC\",\n  \"websiteUrl\": \"https://www.beanbrew.com\",\n  \"description\": \"Artisanal coffee shop serving the finest locally-sourced beans.\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "51c1eb7f-e400-4068-85ab-f589584b8cb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has tenant ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.category).to.eql('COFFEE_SHOP');",
                  "    ",
                  "    // Store tenant ID for subsequent requests",
                  "    pm.environment.set('coffeeShopTenantId', jsonData.id);",
                  "});"
                ],
                "_lastExecutionId": "4643c56b-53b4-4137-9d7b-e6cf59b774eb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df9f88d6-d287-4ae4-8723-c07147c7e4a9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "362",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Bean & Brew Cafe\",\n  \"category\": \"COFFEE_SHOP\",\n  \"address\": \"456 Coffee Lane, BGC Taguig\",\n  \"phoneNumber\": \"+63 2 8777 5678\",\n  \"email\": \"hello@beanbrew.com\",\n  \"primaryColor\": \"#8B4513\",\n  \"secondaryColor\": \"#FFF8DC\",\n  \"websiteUrl\": \"https://www.beanbrew.com\",\n  \"description\": \"Artisanal coffee shop serving the finest locally-sourced beans.\"\n}"
          }
        },
        "response": {
          "id": "cb55e6af-09db-40a9-87a2-cc910a3ab2fb",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "490"
            },
            {
              "key": "ETag",
              "value": "W/\"1ea-jv75iSoo78XojQvjC/DFEArkgSs\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:48 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              51,
              52,
              102,
              50,
              98,
              50,
              98,
              45,
              50,
              100,
              48,
              49,
              45,
              52,
              101,
              102,
              99,
              45,
              57,
              48,
              55,
              99,
              45,
              101,
              54,
              97,
              56,
              98,
              51,
              99,
              50,
              99,
              102,
              102,
              57,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              97,
              110,
              32,
              38,
              32,
              66,
              114,
              101,
              119,
              32,
              67,
              97,
              102,
              101,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              98,
              101,
              97,
              110,
              45,
              97,
              110,
              100,
              45,
              98,
              114,
              101,
              119,
              45,
              99,
              97,
              102,
              101,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              67,
              79,
              70,
              70,
              69,
              69,
              95,
              83,
              72,
              79,
              80,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              52,
              53,
              54,
              32,
              67,
              111,
              102,
              102,
              101,
              101,
              32,
              76,
              97,
              110,
              101,
              44,
              32,
              66,
              71,
              67,
              32,
              84,
              97,
              103,
              117,
              105,
              103,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              55,
              55,
              55,
              32,
              53,
              54,
              55,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              104,
              101,
              108,
              108,
              111,
              64,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              56,
              66,
              52,
              53,
              49,
              51,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              70,
              56,
              68,
              67,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              114,
              116,
              105,
              115,
              97,
              110,
              97,
              108,
              32,
              99,
              111,
              102,
              102,
              101,
              101,
              32,
              115,
              104,
              111,
              112,
              32,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              110,
              101,
              115,
              116,
              32,
              108,
              111,
              99,
              97,
              108,
              108,
              121,
              45,
              115,
              111,
              117,
              114,
              99,
              101,
              100,
              32,
              98,
              101,
              97,
              110,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 99,
          "responseSize": 490
        },
        "id": "58b6f08f-dd33-4073-ad39-40741c46981c",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Response has tenant ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7f7a8913-9ec4-4805-a7e1-10e9abf79d4d",
          "length": 19,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a864ab8b-1691-431c-91e7-46b4b93f1461"
        },
        "item": {
          "id": "1837bafd-bd97-4a7e-94c2-5534f7688acc",
          "name": "Get All Tenants",
          "request": {
            "url": {
              "path": [
                "tenants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "818df34c-e9cc-4bb1-b16f-81d22319192e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each tenant has required fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(tenant => {",
                  "            pm.expect(tenant).to.have.property('id');",
                  "            pm.expect(tenant).to.have.property('name');",
                  "            pm.expect(tenant).to.have.property('category');",
                  "            pm.expect(tenant).to.have.property('_count');",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "ebba784a-2a78-44f0-aecf-fbbb06ec40f8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "753793d8-745f-40ed-ad05-ba73cb10f5c6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1b84a1b7-3257-4ab6-8846-b662ca464ec3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "3657"
            },
            {
              "key": "ETag",
              "value": "W/\"e49-u6I6AI2jvGMAdTqYVR+tlvTvmT8\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              51,
              52,
              102,
              50,
              98,
              50,
              98,
              45,
              50,
              100,
              48,
              49,
              45,
              52,
              101,
              102,
              99,
              45,
              57,
              48,
              55,
              99,
              45,
              101,
              54,
              97,
              56,
              98,
              51,
              99,
              50,
              99,
              102,
              102,
              57,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              97,
              110,
              32,
              38,
              32,
              66,
              114,
              101,
              119,
              32,
              67,
              97,
              102,
              101,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              98,
              101,
              97,
              110,
              45,
              97,
              110,
              100,
              45,
              98,
              114,
              101,
              119,
              45,
              99,
              97,
              102,
              101,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              67,
              79,
              70,
              70,
              69,
              69,
              95,
              83,
              72,
              79,
              80,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              52,
              53,
              54,
              32,
              67,
              111,
              102,
              102,
              101,
              101,
              32,
              76,
              97,
              110,
              101,
              44,
              32,
              66,
              71,
              67,
              32,
              84,
              97,
              103,
              117,
              105,
              103,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              55,
              55,
              55,
              32,
              53,
              54,
              55,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              104,
              101,
              108,
              108,
              111,
              64,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              56,
              66,
              52,
              53,
              49,
              51,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              70,
              56,
              68,
              67,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              114,
              116,
              105,
              115,
              97,
              110,
              97,
              108,
              32,
              99,
              111,
              102,
              102,
              101,
              101,
              32,
              115,
              104,
              111,
              112,
              32,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              110,
              101,
              115,
              116,
              32,
              108,
              111,
              99,
              97,
              108,
              108,
              121,
              45,
              115,
              111,
              117,
              114,
              99,
              101,
              100,
              32,
              98,
              101,
              97,
              110,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              102,
              54,
              50,
              54,
              99,
              100,
              45,
              54,
              48,
              100,
              55,
              45,
              52,
              48,
              100,
              100,
              45,
              57,
              51,
              54,
              50,
              45,
              101,
              97,
              53,
              102,
              98,
              55,
              54,
              55,
              53,
              100,
              56,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              54,
              66,
              51,
              53,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              103,
              121,
              109,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              102,
              56,
              57,
              101,
              98,
              55,
              45,
              51,
              98,
              102,
              54,
              45,
              52,
              99,
              48,
              99,
              45,
              98,
              56,
              55,
              57,
              45,
              55,
              57,
              98,
              99,
              54,
              56,
              101,
              98,
              56,
              57,
              98,
              57,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              52,
              50,
              53,
              56,
              56,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              52,
              50,
              53,
              56,
              56,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              52,
              53,
              48,
              48,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              58,
              32,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              102,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              99,
              101,
              110,
              116,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              97,
              116,
              101,
              45,
              111,
              102,
              45,
              116,
              104,
              101,
              45,
              97,
              114,
              116,
              32,
              101,
              113,
              117,
              105,
              112,
              109,
              101,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              116,
              114,
              97,
              105,
              110,
              101,
              114,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              48,
              50,
              46,
              54,
              57,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              48,
              51,
              46,
              55,
              51,
              50,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              98,
              97,
              57,
              55,
              101,
              98,
              49,
              45,
              53,
              99,
              99,
              49,
              45,
              52,
              51,
              48,
              100,
              45,
              97,
              54,
              49,
              100,
              45,
              99,
              52,
              101,
              52,
              54,
              101,
              54,
              51,
              102,
              101,
              57,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              53,
              55,
              55,
              56,
              56,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              53,
              55,
              55,
              56,
              56,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              52,
              53,
              48,
              48,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              58,
              32,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              102,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              99,
              101,
              110,
              116,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              97,
              116,
              101,
              45,
              111,
              102,
              45,
              116,
              104,
              101,
              45,
              97,
              114,
              116,
              32,
              101,
              113,
              117,
              105,
              112,
              109,
              101,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              116,
              114,
              97,
              105,
              110,
              101,
              114,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              54,
              58,
              49,
              56,
              46,
              50,
              55,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              54,
              58,
              49,
              57,
              46,
              53,
              52,
              55,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              54,
              54,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              54,
              54,
              50,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              50,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              49,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              49,
              48,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              50,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              52,
              51,
              55,
              51,
              99,
              51,
              102,
              45,
              53,
              52,
              102,
              56,
              45,
              52,
              48,
              53,
              48,
              45,
              98,
              100,
              101,
              99,
              45,
              102,
              57,
              97,
              52,
              99,
              56,
              101,
              49,
              55,
              49,
              53,
              50,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              50,
              58,
              52,
              51,
              46,
              49,
              50,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              50,
              58,
              52,
              51,
              46,
              49,
              50,
              57,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              99,
              57,
              99,
              52,
              101,
              97,
              99,
              45,
              55,
              102,
              51,
              100,
              45,
              52,
              52,
              54,
              51,
              45,
              57,
              49,
              53,
              100,
              45,
              99,
              101,
              53,
              51,
              97,
              100,
              99,
              49,
              56,
              54,
              54,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              51,
              55,
              58,
              48,
              53,
              46,
              57,
              51,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              51,
              55,
              58,
              48,
              53,
              46,
              57,
              51,
              51,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 55,
          "responseSize": 3657
        },
        "id": "1837bafd-bd97-4a7e-94c2-5534f7688acc",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          },
          {
            "assertion": "Each tenant has required fields",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3c3f93ae-2875-48c1-bbbe-e69e04cd221d",
          "length": 19,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4f8fe5a0-8442-431c-a39b-30a2e88e9bff"
        },
        "item": {
          "id": "6c7d2943-fb34-4296-bd68-e2e32a98c67c",
          "name": "Get Gym Tenants Only",
          "request": {
            "url": {
              "path": [
                "tenants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "category",
                  "value": "GYM"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f3260483-4d2f-43ad-81fc-0c5186400913",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All tenants are GYM category\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.forEach(tenant => {",
                  "        pm.expect(tenant.category).to.eql('GYM');",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "86f14072-848b-4046-bf87-db032fe246b5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "category",
                "value": "GYM"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b30b078f-d108-4b36-826b-51b749db9145",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4c5b53ad-1001-4aab-8c07-1a5834888ed1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "3145"
            },
            {
              "key": "ETag",
              "value": "W/\"c49-IQybVcOf1PVmreQrdbLzSOPaRc8\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              102,
              54,
              50,
              54,
              99,
              100,
              45,
              54,
              48,
              100,
              55,
              45,
              52,
              48,
              100,
              100,
              45,
              57,
              51,
              54,
              50,
              45,
              101,
              97,
              53,
              102,
              98,
              55,
              54,
              55,
              53,
              100,
              56,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              54,
              66,
              51,
              53,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              103,
              121,
              109,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              102,
              56,
              57,
              101,
              98,
              55,
              45,
              51,
              98,
              102,
              54,
              45,
              52,
              99,
              48,
              99,
              45,
              98,
              56,
              55,
              57,
              45,
              55,
              57,
              98,
              99,
              54,
              56,
              101,
              98,
              56,
              57,
              98,
              57,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              52,
              50,
              53,
              56,
              56,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              52,
              50,
              53,
              56,
              56,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              52,
              53,
              48,
              48,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              58,
              32,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              102,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              99,
              101,
              110,
              116,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              97,
              116,
              101,
              45,
              111,
              102,
              45,
              116,
              104,
              101,
              45,
              97,
              114,
              116,
              32,
              101,
              113,
              117,
              105,
              112,
              109,
              101,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              116,
              114,
              97,
              105,
              110,
              101,
              114,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              48,
              50,
              46,
              54,
              57,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              48,
              51,
              46,
              55,
              51,
              50,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              98,
              97,
              57,
              55,
              101,
              98,
              49,
              45,
              53,
              99,
              99,
              49,
              45,
              52,
              51,
              48,
              100,
              45,
              97,
              54,
              49,
              100,
              45,
              99,
              52,
              101,
              52,
              54,
              101,
              54,
              51,
              102,
              101,
              57,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              53,
              55,
              55,
              56,
              56,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              53,
              55,
              55,
              56,
              56,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              52,
              53,
              48,
              48,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              58,
              32,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              102,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              99,
              101,
              110,
              116,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              97,
              116,
              101,
              45,
              111,
              102,
              45,
              116,
              104,
              101,
              45,
              97,
              114,
              116,
              32,
              101,
              113,
              117,
              105,
              112,
              109,
              101,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              116,
              114,
              97,
              105,
              110,
              101,
              114,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              54,
              58,
              49,
              56,
              46,
              50,
              55,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              54,
              58,
              49,
              57,
              46,
              53,
              52,
              55,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              54,
              54,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              54,
              54,
              50,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              50,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              49,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              49,
              48,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              50,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              52,
              51,
              55,
              51,
              99,
              51,
              102,
              45,
              53,
              52,
              102,
              56,
              45,
              52,
              48,
              53,
              48,
              45,
              98,
              100,
              101,
              99,
              45,
              102,
              57,
              97,
              52,
              99,
              56,
              101,
              49,
              55,
              49,
              53,
              50,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              53,
              54,
              50,
              56,
              56,
              51,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              50,
              58,
              52,
              51,
              46,
              49,
              50,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              50,
              58,
              52,
              51,
              46,
              49,
              50,
              57,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              99,
              57,
              99,
              52,
              101,
              97,
              99,
              45,
              55,
              102,
              51,
              100,
              45,
              52,
              52,
              54,
              51,
              45,
              57,
              49,
              53,
              100,
              45,
              99,
              101,
              53,
              51,
              97,
              100,
              99,
              49,
              56,
              54,
              54,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              51,
              55,
              58,
              48,
              53,
              46,
              57,
              51,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              51,
              55,
              58,
              48,
              53,
              46,
              57,
              51,
              51,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 53,
          "responseSize": 3145
        },
        "id": "6c7d2943-fb34-4296-bd68-e2e32a98c67c",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "All tenants are GYM category",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "be19b526-5424-4cd3-b627-c52ed079926a",
          "length": 19,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6d816276-9bfa-4727-8ea8-5446d4e5d5b9"
        },
        "item": {
          "id": "ee097d37-e758-4088-9f6e-b52b552caeac",
          "name": "Get Tenant by ID",
          "request": {
            "url": {
              "path": [
                "tenants",
                "{{gymTenantId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "09e56756-595b-4631-b67a-f1613ee28396",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "433f3c87-08d8-4a72-8817-98e9ed97bcbe"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0b8d4cfd-02fe-44a2-8a03-c875a033f1d3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tenant details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('_count');",
                  "});"
                ],
                "_lastExecutionId": "cad2131e-c7da-41b6-ac63-2621370723a0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants",
              "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "785422d1-1d57-416d-ad5c-e865e424797d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f3a0ea1c-d224-4f74-95a0-cb1572bf0b67",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "481"
            },
            {
              "key": "ETag",
              "value": "W/\"1e1-/E3lF63cv8QVL4t7gcJeW3xusKI\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              102,
              54,
              50,
              54,
              99,
              100,
              45,
              54,
              48,
              100,
              55,
              45,
              52,
              48,
              100,
              100,
              45,
              57,
              51,
              54,
              50,
              45,
              101,
              97,
              53,
              102,
              98,
              55,
              54,
              55,
              53,
              100,
              56,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              54,
              66,
              51,
              53,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              103,
              121,
              109,
              32,
              102,
              111,
              114,
              32,
              65,
              80,
              73,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              95,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              123,
              34,
              117,
              115,
              101,
              114,
              115,
              34,
              58,
              48,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 50,
          "responseSize": 481
        },
        "id": "ee097d37-e758-4088-9f6e-b52b552caeac",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has tenant details",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2afe5b56-1887-4818-b958-5f32b147d76f",
          "length": 19,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "96480d96-2b41-45a2-99e3-323af71c1dc5"
        },
        "item": {
          "id": "1a1b466b-4213-4cef-8eb9-2caf43de86b4",
          "name": "Update Tenant",
          "request": {
            "url": {
              "path": [
                "tenants",
                "{{gymTenantId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"Test Updated: Premium fitness center with state-of-the-art equipment and professional trainers.\",\n  \"primaryColor\": \"#FF4500\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "65561f82-5d3e-4691-9079-e82f7af097b3",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8c6d03bd-0687-4586-b8bc-4cb4135a102f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3d1d2d8d-ef19-4993-8fed-aeed9c2c48fa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tenant was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.description).to.include('Test Updated');",
                  "});"
                ],
                "_lastExecutionId": "788d8077-66e8-42dc-a374-5b111d6d2a16"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants",
              "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "872eef4a-ccb2-4119-8d95-02ae2e28192f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "147",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"description\": \"Test Updated: Premium fitness center with state-of-the-art equipment and professional trainers.\",\n  \"primaryColor\": \"#FF4500\"\n}"
          }
        },
        "response": {
          "id": "1b491653-8811-44b8-9ec4-0bf1a3b7bc4d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "530"
            },
            {
              "key": "ETag",
              "value": "W/\"212-4PQReKmSYHynVYjj/dpi0qA8Kco\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              102,
              54,
              50,
              54,
              99,
              100,
              45,
              54,
              48,
              100,
              55,
              45,
              52,
              48,
              100,
              100,
              45,
              57,
              51,
              54,
              50,
              45,
              101,
              97,
              53,
              102,
              98,
              55,
              54,
              55,
              53,
              100,
              56,
              54,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              51,
              51,
              50,
              55,
              56,
              56,
              52,
              52,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              49,
              50,
              51,
              32,
              84,
              101,
              115,
              116,
              32,
              70,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              83,
              116,
              114,
              101,
              101,
              116,
              44,
              32,
              77,
              97,
              107,
              97,
              116,
              105,
              32,
              67,
              105,
              116,
              121,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              53,
              53,
              53,
              32,
              57,
              57,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              52,
              53,
              48,
              48,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              50,
              69,
              51,
              52,
              52,
              48,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              85,
              112,
              100,
              97,
              116,
              101,
              100,
              58,
              32,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              102,
              105,
              116,
              110,
              101,
              115,
              115,
              32,
              99,
              101,
              110,
              116,
              101,
              114,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              97,
              116,
              101,
              45,
              111,
              102,
              45,
              116,
              104,
              101,
              45,
              97,
              114,
              116,
              32,
              101,
              113,
              117,
              105,
              112,
              109,
              101,
              110,
              116,
              32,
              97,
              110,
              100,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              32,
              116,
              114,
              97,
              105,
              110,
              101,
              114,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              53,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              57,
              46,
              53,
              53,
              57,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 100,
          "responseSize": 530
        },
        "id": "1a1b466b-4213-4cef-8eb9-2caf43de86b4",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Tenant was updated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42355e32-b7ad-4d7b-9895-f54585f3ea48"
        },
        "item": {
          "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
          "name": "Create Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    console.log('No gymTenantId found, attempting to get one...');",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "                console.log('Set gymTenantId to:', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    ",
                  "    // Store user ID for subsequent requests",
                  "    pm.environment.set('gymUserId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"User belongs to gym tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                  "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                  "});",
                  "",
                  "pm.test(\"Business data contains gym-specific info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                  "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                  "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                  "});"
                ],
                "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50720653-8834-4182-9e89-b32600b2f077",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "506",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"tenantId\": \"5ef626cd-60d7-40dd-9362-ea5fb7675d86\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"testuser1754332789730@example.com\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
          }
        },
        "response": {
          "id": "811ce868-8a3f-495b-a71c-51f3cc6eb092",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "143"
            },
            {
              "key": "ETag",
              "value": "W/\"8f-7/j3IEZ8ZtNHuIKhL7iqSLLoZcc\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              91,
              34,
              114,
              111,
              108,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              111,
              110,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              58,
              32,
              79,
              87,
              78,
              69,
              82,
              44,
              32,
              65,
              68,
              77,
              73,
              78,
              44,
              32,
              83,
              84,
              65,
              70,
              70,
              44,
              32,
              77,
              69,
              77,
              66,
              69,
              82,
              44,
              32,
              67,
              85,
              83,
              84,
              79,
              77,
              69,
              82,
              44,
              32,
              83,
              72,
              79,
              80,
              80,
              69,
              82,
              34,
              93,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 51,
          "responseSize": 143
        },
        "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response has user ID",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has user ID",
              "message": "expected { …(3) } to have property 'id'",
              "stack": "AssertionError: expected { …(3) } to have property 'id'\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "User belongs to gym tenant",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "User belongs to gym tenant",
              "message": "Cannot read properties of undefined (reading 'category')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'category')\n   at Object.eval sandbox-script.js:3:8)"
            }
          },
          {
            "assertion": "Business data contains gym-specific info",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Business data contains gym-specific info",
              "message": "expected { …(3) } to have property 'businessData'",
              "stack": "AssertionError: expected { …(3) } to have property 'businessData'\n   at Object.eval sandbox-script.js:4:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f24e135d-664f-4c30-b8c5-637030cae8fd",
          "length": 19,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "827fb261-817c-4121-bad4-a469cb86cb9c"
        },
        "item": {
          "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
          "name": "Create Another Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('gymUserId2', jsonData.id);",
                  "});"
                ],
                "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6aa128f5-4732-4beb-99a6-dc705ca92e25",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "464",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"tenantId\": \"5ef626cd-60d7-40dd-9362-ea5fb7675d86\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"testuser21754332789915@example.com\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
          }
        },
        "response": {
          "id": "00d08d14-6dc5-4783-8663-4ea57041e8dc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "143"
            },
            {
              "key": "ETag",
              "value": "W/\"8f-7/j3IEZ8ZtNHuIKhL7iqSLLoZcc\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:49 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              91,
              34,
              114,
              111,
              108,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              111,
              110,
              101,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              102,
              111,
              108,
              108,
              111,
              119,
              105,
              110,
              103,
              32,
              118,
              97,
              108,
              117,
              101,
              115,
              58,
              32,
              79,
              87,
              78,
              69,
              82,
              44,
              32,
              65,
              68,
              77,
              73,
              78,
              44,
              32,
              83,
              84,
              65,
              70,
              70,
              44,
              32,
              77,
              69,
              77,
              66,
              69,
              82,
              44,
              32,
              67,
              85,
              83,
              84,
              79,
              77,
              69,
              82,
              44,
              32,
              83,
              72,
              79,
              80,
              80,
              69,
              82,
              34,
              93,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 55,
          "responseSize": 143
        },
        "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response has user ID",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e7c9c9e6-2cc0-48dc-acad-aeff16bf1c7b",
          "length": 19,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "38d04d8c-3216-429a-8df6-eb47e589bf7f"
        },
        "item": {
          "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
          "name": "Get All Users (Admin)",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Users have tenant information\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(user => {",
                  "            pm.expect(user).to.have.property('id');",
                  "            pm.expect(user).to.have.property('firstName');",
                  "            pm.expect(user).to.have.property('tenant');",
                  "            pm.expect(user.tenant).to.have.property('name');",
                  "            pm.expect(user.tenant).to.have.property('category');",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "25ebc5f0-4f75-4d05-839d-0f0a027c3eaa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "38548165-ebf5-413f-85cc-3ca29024d184",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2177"
            },
            {
              "key": "ETag",
              "value": "W/\"881-vfxLDsMWIHIjNiIN2zMIusjmdxA\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              56,
              54,
              52,
              99,
              49,
              49,
              101,
              45,
              101,
              49,
              55,
              55,
              45,
              52,
              57,
              98,
              54,
              45,
              98,
              48,
              101,
              55,
              45,
              53,
              51,
              55,
              53,
              50,
              52,
              54,
              55,
              50,
              53,
              52,
              52,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              52,
              55,
              51,
              54,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              55,
              51,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              99,
              97,
              48,
              98,
              100,
              50,
              100,
              49,
              45,
              101,
              54,
              55,
              54,
              45,
              52,
              99,
              100,
              48,
              45,
              57,
              54,
              102,
              55,
              45,
              55,
              49,
              51,
              102,
              57,
              54,
              99,
              97,
              55,
              101,
              49,
              101,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              55,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              55,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              102,
              49,
              57,
              101,
              49,
              98,
              45,
              102,
              50,
              50,
              97,
              45,
              52,
              97,
              101,
              100,
              45,
              97,
              100,
              97,
              102,
              45,
              52,
              98,
              97,
              50,
              97,
              100,
              98,
              56,
              97,
              52,
              49,
              55,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              51,
              48,
              56,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              48,
              46,
              56,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              54,
              97,
              56,
              98,
              52,
              51,
              52,
              45,
              51,
              50,
              101,
              53,
              45,
              52,
              49,
              99,
              101,
              45,
              57,
              55,
              53,
              49,
              45,
              99,
              55,
              48,
              101,
              50,
              52,
              98,
              52,
              98,
              100,
              98,
              99,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              52,
              55,
              56,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              55,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 100,
          "responseSize": 2177
        },
        "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is array",
            "skipped": false
          },
          {
            "assertion": "Users have tenant information",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "497b030c-52f6-4e28-a006-c899bcab2123",
          "length": 19,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ec81bea6-8a4a-44b6-a1a2-812bdd2e6c03"
        },
        "item": {
          "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
          "name": "Get Users by Tenant",
          "request": {
            "url": {
              "path": [
                "users",
                "tenant",
                "{{gymTenantId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"All users belong to correct tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const expectedTenantId = pm.environment.get('gymTenantId');",
                  "    jsonData.forEach(user => {",
                  "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              "tenant",
              "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d26cee02-0c42-406a-b231-f80e0bbd4c21",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ac1563dc-1b67-4108-9f40-9dfa082d92dc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2"
            },
            {
              "key": "ETag",
              "value": "W/\"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              93
            ]
          },
          "cookie": [],
          "responseTime": 146,
          "responseSize": 2
        },
        "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "All users belong to correct tenant",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "815b5174-c0aa-45c1-81bc-ae3aecc93cdb",
          "length": 19,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9c4774be-eb72-4272-990b-8ea85b67a63a"
        },
        "item": {
          "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
          "name": "Get User by ID",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "});"
                ],
                "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb191ec2-323d-49ba-aeca-da217ec87430",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c1da09ef-c884-4ff8-9358-2b29699f3d62",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2177"
            },
            {
              "key": "ETag",
              "value": "W/\"881-vfxLDsMWIHIjNiIN2zMIusjmdxA\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              56,
              54,
              52,
              99,
              49,
              49,
              101,
              45,
              101,
              49,
              55,
              55,
              45,
              52,
              57,
              98,
              54,
              45,
              98,
              48,
              101,
              55,
              45,
              53,
              51,
              55,
              53,
              50,
              52,
              54,
              55,
              50,
              53,
              52,
              52,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              52,
              55,
              51,
              54,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              55,
              51,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              99,
              97,
              48,
              98,
              100,
              50,
              100,
              49,
              45,
              101,
              54,
              55,
              54,
              45,
              52,
              99,
              100,
              48,
              45,
              57,
              54,
              102,
              55,
              45,
              55,
              49,
              51,
              102,
              57,
              54,
              99,
              97,
              55,
              101,
              49,
              101,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              55,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              55,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              102,
              49,
              57,
              101,
              49,
              98,
              45,
              102,
              50,
              50,
              97,
              45,
              52,
              97,
              101,
              100,
              45,
              97,
              100,
              97,
              102,
              45,
              52,
              98,
              97,
              50,
              97,
              100,
              98,
              56,
              97,
              52,
              49,
              55,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              51,
              48,
              56,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              48,
              46,
              56,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              54,
              97,
              56,
              98,
              52,
              51,
              52,
              45,
              51,
              50,
              101,
              53,
              45,
              52,
              49,
              99,
              101,
              45,
              57,
              55,
              53,
              49,
              45,
              99,
              55,
              48,
              101,
              50,
              52,
              98,
              52,
              98,
              100,
              98,
              99,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              52,
              55,
              56,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              55,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 97,
          "responseSize": 2177
        },
        "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has user details",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has user details",
              "message": "expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'",
              "stack": "AssertionError: expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "815b5174-c0aa-45c1-81bc-ae3aecc93cdb",
          "length": 19,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9c4774be-eb72-4272-990b-8ea85b67a63a"
        },
        "item": {
          "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
          "name": "Get User by ID",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "});"
                ],
                "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb191ec2-323d-49ba-aeca-da217ec87430",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c1da09ef-c884-4ff8-9358-2b29699f3d62",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "2177"
            },
            {
              "key": "ETag",
              "value": "W/\"881-vfxLDsMWIHIjNiIN2zMIusjmdxA\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              56,
              54,
              52,
              99,
              49,
              49,
              101,
              45,
              101,
              49,
              55,
              55,
              45,
              52,
              57,
              98,
              54,
              45,
              98,
              48,
              101,
              55,
              45,
              53,
              51,
              55,
              53,
              50,
              52,
              54,
              55,
              50,
              53,
              52,
              52,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              52,
              55,
              51,
              54,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              55,
              51,
              54,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              56,
              54,
              54,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              99,
              97,
              48,
              98,
              100,
              50,
              100,
              49,
              45,
              101,
              54,
              55,
              54,
              45,
              52,
              99,
              100,
              48,
              45,
              57,
              54,
              102,
              55,
              45,
              55,
              49,
              51,
              102,
              57,
              54,
              99,
              97,
              55,
              101,
              49,
              101,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              55,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              51,
              46,
              55,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              52,
              58,
              49,
              54,
              58,
              48,
              52,
              46,
              48,
              48,
              49,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              53,
              49,
              101,
              56,
              54,
              57,
              48,
              45,
              102,
              101,
              101,
              98,
              45,
              52,
              54,
              50,
              97,
              45,
              57,
              99,
              50,
              56,
              45,
              97,
              102,
              51,
              102,
              54,
              55,
              56,
              51,
              98,
              100,
              50,
              49,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              51,
              48,
              53,
              54,
              51,
              52,
              51,
              49,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              49,
              102,
              49,
              57,
              101,
              49,
              98,
              45,
              102,
              50,
              50,
              97,
              45,
              52,
              97,
              101,
              100,
              45,
              97,
              100,
              97,
              102,
              45,
              52,
              98,
              97,
              50,
              97,
              100,
              98,
              56,
              97,
              52,
              49,
              55,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              97,
              102,
              102,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              115,
              116,
              97,
              102,
              102,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              51,
              48,
              56,
              55,
              53,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              49,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              83,
              84,
              65,
              70,
              70,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              48,
              46,
              56,
              55,
              53,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              79,
              112,
              101,
              114,
              97,
              116,
              105,
              111,
              110,
              115,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              53,
              49,
              46,
              48,
              49,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              54,
              97,
              56,
              98,
              52,
              51,
              52,
              45,
              51,
              50,
              101,
              53,
              45,
              52,
              49,
              99,
              101,
              45,
              57,
              55,
              53,
              49,
              45,
              99,
              55,
              48,
              101,
              50,
              52,
              98,
              52,
              98,
              100,
              98,
              99,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              73,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              119,
              110,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              111,
              119,
              110,
              101,
              114,
              46,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              52,
              55,
              56,
              64,
              116,
              101,
              115,
              116,
              103,
              121,
              109,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              48,
              34,
              44,
              34,
              114,
              111,
              108,
              101,
              34,
              58,
              34,
              79,
              87,
              78,
              69,
              82,
              34,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              110,
              111,
              116,
              101,
              115,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              68,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              52,
              55,
              56,
              90,
              34,
              44,
              34,
              100,
              101,
              112,
              97,
              114,
              116,
              109,
              101,
              110,
              116,
              34,
              58,
              34,
              77,
              97,
              110,
              97,
              103,
              101,
              109,
              101,
              110,
              116,
              34,
              125,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              51,
              84,
              49,
              51,
              58,
              52,
              51,
              58,
              52,
              57,
              46,
              55,
              55,
              56,
              90,
              34,
              44,
              34,
              116,
              101,
              110,
              97,
              110,
              116,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              48,
              53,
              54,
              53,
              98,
              53,
              50,
              45,
              48,
              99,
              48,
              99,
              45,
              52,
              49,
              100,
              53,
              45,
              98,
              100,
              56,
              53,
              45,
              98,
              55,
              97,
              51,
              48,
              97,
              49,
              97,
              99,
              97,
              48,
              53,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              71,
              121,
              109,
              32,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              71,
              89,
              77,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              45,
              103,
              121,
              109,
              45,
              49,
              55,
              53,
              52,
              50,
              50,
              56,
              54,
              50,
              57,
              50,
              55,
              51,
              34,
              125,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 97,
          "responseSize": 2177
        },
        "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response has user details",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response has user details",
              "message": "expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'",
              "stack": "AssertionError: expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b",
          "length": 19,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "393b067c-aae2-4a32-ac11-2f237558c3b0"
        },
        "item": {
          "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                  "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                  "});"
                ],
                "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df6b8990-dc87-4556-9aa5-ee7d1d8c221b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "339",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
          }
        },
        "response": {
          "id": "4555f634-cf72-4e25-885a-66ab12e6f9e2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "71"
            },
            {
              "key": "ETag",
              "value": "W/\"47-9WptQMN03ooZYnaau1tZSIYijSE\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              65,
              84,
              67,
              72,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 71
        },
        "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "User was updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "User was updated",
              "message": "expected undefined to deeply equal '09171111111'",
              "stack": "AssertionError: expected undefined to deeply equal '09171111111'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b",
          "length": 19,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "393b067c-aae2-4a32-ac11-2f237558c3b0"
        },
        "item": {
          "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                  "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                  "});"
                ],
                "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df6b8990-dc87-4556-9aa5-ee7d1d8c221b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "339",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
          }
        },
        "response": {
          "id": "4555f634-cf72-4e25-885a-66ab12e6f9e2",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "71"
            },
            {
              "key": "ETag",
              "value": "W/\"47-9WptQMN03ooZYnaau1tZSIYijSE\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:50 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              65,
              84,
              67,
              72,
              32,
              47,
              117,
              115,
              101,
              114,
              115,
              47,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 71
        },
        "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "User was updated",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "User was updated",
              "message": "expected undefined to deeply equal '09171111111'",
              "stack": "AssertionError: expected undefined to deeply equal '09171111111'\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4091f92f-f2b3-4dfc-8f35-49b84ca6d059",
          "length": 19,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ce018e4d-63ac-46f1-a056-d30090b8e112"
        },
        "item": {
          "id": "0e3dd9fa-b91c-43e3-afcc-a818cd093ffe",
          "name": "Try to Create User for Coffee Shop (Should Fail)",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{coffeeShopTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{coffeeShopTenantId}}\",\n  \"firstName\": \"Coffee\",\n  \"lastName\": \"Lover\",\n  \"email\": \"coffee@example.com\",\n  \"role\": \"CUSTOMER\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e6849f42-8e51-446a-9406-f230b1591b66",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 403 (Forbidden)\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions business type restriction\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('GYM');",
                  "});"
                ],
                "_lastExecutionId": "d7d5c9e1-d9da-4ef6-b064-1fdf2517dca3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "d34f2b2b-2d01-4efc-907c-e6a8b3c2cff9"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9ecb5d1-8d23-446e-b77b-9820626c85cb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "159",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"tenantId\": \"d34f2b2b-2d01-4efc-907c-e6a8b3c2cff9\",\n  \"firstName\": \"Coffee\",\n  \"lastName\": \"Lover\",\n  \"email\": \"coffee@example.com\",\n  \"role\": \"CUSTOMER\"\n}"
          }
        },
        "response": {
          "id": "9f77e6b6-b42a-497d-be79-69c0419b18a2",
          "status": "Forbidden",
          "code": 403,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "133"
            },
            {
              "key": "ETag",
              "value": "W/\"85-ATJtBtKaRzXfBCg24gUewXFw+Q8\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              101,
              110,
              100,
              112,
              111,
              105,
              110,
              116,
              32,
              105,
              115,
              32,
              111,
              110,
              108,
              121,
              32,
              97,
              118,
              97,
              105,
              108,
              97,
              98,
              108,
              101,
              32,
              102,
              111,
              114,
              32,
              71,
              89,
              77,
              32,
              98,
              117,
              115,
              105,
              110,
              101,
              115,
              115,
              101,
              115,
              46,
              32,
              67,
              117,
              114,
              114,
              101,
              110,
              116,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              32,
              105,
              115,
              32,
              67,
              79,
              70,
              70,
              69,
              69,
              95,
              83,
              72,
              79,
              80,
              46,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              70,
              111,
              114,
              98,
              105,
              100,
              100,
              101,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              51,
              125
            ]
          },
          "cookie": [],
          "responseTime": 54,
          "responseSize": 133
        },
        "id": "0e3dd9fa-b91c-43e3-afcc-a818cd093ffe",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 403 (Forbidden)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions business type restriction",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "096ed601-ead9-472d-a96e-ddd67c9b4ebd",
          "length": 19,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a6ca8c0d-d7f7-4898-8af1-354160265ac2"
        },
        "item": {
          "id": "d74179c8-e044-49fb-b287-6648d08e4786",
          "name": "Invalid Tenant ID",
          "request": {
            "url": {
              "path": [
                "tenants",
                "invalid-id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "69bb48d9-7a0c-4fdb-b3d7-d33103ee3b4c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions invalid format\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid tenant ID format');",
                  "});"
                ],
                "_lastExecutionId": "8094bce1-4275-406c-b442-9e30f0b12410"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants",
              "invalid-id"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fcb8ba9a-1af8-458b-9240-18eb0d9449d8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "acd41643-0eb8-4706-8bca-f372ef6911ec",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "77"
            },
            {
              "key": "ETag",
              "value": "W/\"4d-cvSP3S/nnmyWM7vUkV6Ius+l5UU\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              101,
              110,
              97,
              110,
              116,
              32,
              73,
              68,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 77
        },
        "id": "d74179c8-e044-49fb-b287-6648d08e4786",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 400 (Bad Request)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions invalid format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "eca089c2-c511-490a-8005-65b6bcb123e5",
          "length": 19,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5882543b-4aef-4a14-acdd-8d03273811b3"
        },
        "item": {
          "id": "98e6d362-8133-4e58-8d9e-807035c1de5e",
          "name": "Missing Tenant ID in Header",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@example.com\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "da3eb31c-38d2-4326-942e-520772c79d0d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404 (Not Found)\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions tenant ID required\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Tenant ID is required');",
                  "});"
                ],
                "_lastExecutionId": "0ddfade9-fccb-49a5-8182-a3b40a6b9cb9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6b942c1c-be79-4104-95bf-856fca4d8bde",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "132",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"tenantId\": \"5ef626cd-60d7-40dd-9362-ea5fb7675d86\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@example.com\"\n}"
          }
        },
        "response": {
          "id": "82a2603a-32e8-4a40-aaf0-70cfcd2ae393",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-bouFo/LIZanCE55K1epB0o44gr4\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              84,
              101,
              110,
              97,
              110,
              116,
              32,
              73,
              68,
              32,
              105,
              115,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              46,
              32,
              80,
              114,
              111,
              118,
              105,
              100,
              101,
              32,
              105,
              116,
              32,
              97,
              115,
              32,
              97,
              32,
              85,
              82,
              76,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              44,
              32,
              113,
              117,
              101,
              114,
              121,
              32,
              112,
              97,
              114,
              97,
              109,
              101,
              116,
              101,
              114,
              44,
              32,
              111,
              114,
              32,
              120,
              45,
              116,
              101,
              110,
              97,
              110,
              116,
              45,
              105,
              100,
              32,
              104,
              101,
              97,
              100,
              101,
              114,
              46,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              78,
              111,
              116,
              32,
              70,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              52,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 144
        },
        "id": "98e6d362-8133-4e58-8d9e-807035c1de5e",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 404 (Not Found)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions tenant ID required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a2ce1263-78d1-4ae3-9c93-07ed35e328f7",
          "length": 19,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0ab3873b-72de-40c3-ae04-54d8249c4f9a"
        },
        "item": {
          "id": "c26bd321-7b9c-4756-ad3d-29a9e1483b60",
          "name": "Invalid Email Format",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15cac5a5-d3cb-442f-9c4f-be6660f71c78",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400 (Bad Request)\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions invalid email\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Check for either our custom message or class-validator message",
                  "    const message = Array.isArray(jsonData.message) ? jsonData.message.join(' ') : jsonData.message;",
                  "    pm.expect(message).to.satisfy(msg => msg.includes('Invalid email format') || msg.includes('email must be an email'));",
                  "});"
                ],
                "_lastExecutionId": "5cfed4f4-cf23-41ed-8901-348647ae8d96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8ca09ca8-c014-443f-bc2b-0db265ec4fd3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "129",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"tenantId\": \"5ef626cd-60d7-40dd-9362-ea5fb7675d86\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"invalid-email\"\n}"
          }
        },
        "response": {
          "id": "3397dddc-e3c8-4b62-9395-435ab691c15a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "77"
            },
            {
              "key": "ETag",
              "value": "W/\"4d-3V3Uy1KR57m8txxwRQ1zEUNG0HY\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              91,
              34,
              101,
              109,
              97,
              105,
              108,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              97,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              34,
              93,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 48,
          "responseSize": 77
        },
        "id": "c26bd321-7b9c-4756-ad3d-29a9e1483b60",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 400 (Bad Request)",
            "skipped": false
          },
          {
            "assertion": "Error message mentions invalid email",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "26dde85e-6f06-41a0-b51e-c54cc4490399",
          "length": 19,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15401088-a06f-43a5-a987-c72f4f47cb99"
        },
        "item": {
          "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
          "name": "Delete Test User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId2}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set for deletion",
                  "if (!pm.environment.get('gymUserId2')) {",
                  "    // Get existing users to set ID for second user",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                  "            if (gymUsers.length > 1) {",
                  "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                  "            } else if (gymUsers.length > 0) {",
                  "                // Fallback to first user if only one exists",
                  "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was deleted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              "null"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe376a5d-9935-4bd8-bc67-f02b86def602",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "42d7c0ff-4315-4ea7-8a5c-dccaeb055c15",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "75"
            },
            {
              "key": "ETag",
              "value": "W/\"4b-jTkOjsZ077ejWJcHsa9MLGGzroo\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              73,
              68,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 52,
          "responseSize": 75
        },
        "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "User was deleted",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "User was deleted",
              "message": "expected { …(3) } to have property 'id'",
              "stack": "AssertionError: expected { …(3) } to have property 'id'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "26dde85e-6f06-41a0-b51e-c54cc4490399",
          "length": 19,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15401088-a06f-43a5-a987-c72f4f47cb99"
        },
        "item": {
          "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
          "name": "Delete Test User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId2}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set for deletion",
                  "if (!pm.environment.get('gymUserId2')) {",
                  "    // Get existing users to set ID for second user",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                  "            if (gymUsers.length > 1) {",
                  "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                  "            } else if (gymUsers.length > 0) {",
                  "                // Fallback to first user if only one exists",
                  "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was deleted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "users",
              "null"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-tenant-id",
              "value": "5ef626cd-60d7-40dd-9362-ea5fb7675d86"
            },
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe376a5d-9935-4bd8-bc67-f02b86def602",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "42d7c0ff-4315-4ea7-8a5c-dccaeb055c15",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "75"
            },
            {
              "key": "ETag",
              "value": "W/\"4b-jTkOjsZ077ejWJcHsa9MLGGzroo\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              32,
              73,
              68,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              44,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              100,
              32,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              67,
              111,
              100,
              101,
              34,
              58,
              52,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 52,
          "responseSize": 75
        },
        "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "User was deleted",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "User was deleted",
              "message": "expected { …(3) } to have property 'id'",
              "stack": "AssertionError: expected { …(3) } to have property 'id'\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3574bb97-00b4-41ff-be4e-a221379ee0c8",
          "length": 19,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "93e03122-fb76-470b-9736-eb25cd4d664c"
        },
        "item": {
          "id": "77c8049e-ac12-46eb-aa7b-42fa2044ad45",
          "name": "Delete Test Tenant",
          "request": {
            "url": {
              "path": [
                "tenants",
                "{{coffeeShopTenantId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "66cbec8d-c69a-4ccc-8f41-3563f564e7e4",
                "type": "text/javascript",
                "exec": [
                  "// Skip this test if we don't have a coffee shop tenant to delete",
                  "if (!pm.environment.get('coffeeShopTenantId')) {",
                  "    console.log('No coffeeShopTenantId found, skipping deletion test');",
                  "    pm.execution.skipRequest();",
                  "}"
                ],
                "_lastExecutionId": "0b6e198d-9bb3-471b-8126-01d90f962fa1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "95c48d5b-f3f1-4d71-9e63-2bd569587fb5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Tenant was deleted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "0bea9d64-9121-4216-8a68-62b54545e95d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "5000",
            "path": [
              "tenants",
              "d34f2b2b-2d01-4efc-907c-e6a8b3c2cff9"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-bypass-auth",
              "value": "true"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1f016fcb-867a-4bc5-9557-20e73dd21798",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:5000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "929ea511-20e3-40c7-af3d-b9db81c7dc36",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "490"
            },
            {
              "key": "ETag",
              "value": "W/\"1ea-jv75iSoo78XojQvjC/DFEArkgSs\""
            },
            {
              "key": "Date",
              "value": "Mon, 04 Aug 2025 18:39:51 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              51,
              52,
              102,
              50,
              98,
              50,
              98,
              45,
              50,
              100,
              48,
              49,
              45,
              52,
              101,
              102,
              99,
              45,
              57,
              48,
              55,
              99,
              45,
              101,
              54,
              97,
              56,
              98,
              51,
              99,
              50,
              99,
              102,
              102,
              57,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              97,
              110,
              32,
              38,
              32,
              66,
              114,
              101,
              119,
              32,
              67,
              97,
              102,
              101,
              34,
              44,
              34,
              115,
              108,
              117,
              103,
              34,
              58,
              34,
              98,
              101,
              97,
              110,
              45,
              97,
              110,
              100,
              45,
              98,
              114,
              101,
              119,
              45,
              99,
              97,
              102,
              101,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              34,
              67,
              79,
              70,
              70,
              69,
              69,
              95,
              83,
              72,
              79,
              80,
              34,
              44,
              34,
              108,
              111,
              103,
              111,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              100,
              100,
              114,
              101,
              115,
              115,
              34,
              58,
              34,
              52,
              53,
              54,
              32,
              67,
              111,
              102,
              102,
              101,
              101,
              32,
              76,
              97,
              110,
              101,
              44,
              32,
              66,
              71,
              67,
              32,
              84,
              97,
              103,
              117,
              105,
              103,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              43,
              54,
              51,
              32,
              50,
              32,
              56,
              55,
              55,
              55,
              32,
              53,
              54,
              55,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              104,
              101,
              108,
              108,
              111,
              64,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              114,
              105,
              109,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              56,
              66,
              52,
              53,
              49,
              51,
              34,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              97,
              114,
              121,
              67,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              70,
              70,
              70,
              56,
              68,
              67,
              34,
              44,
              34,
              119,
              101,
              98,
              115,
              105,
              116,
              101,
              85,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              98,
              101,
              97,
              110,
              98,
              114,
              101,
              119,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              65,
              114,
              116,
              105,
              115,
              97,
              110,
              97,
              108,
              32,
              99,
              111,
              102,
              102,
              101,
              101,
              32,
              115,
              104,
              111,
              112,
              32,
              115,
              101,
              114,
              118,
              105,
              110,
              103,
              32,
              116,
              104,
              101,
              32,
              102,
              105,
              110,
              101,
              115,
              116,
              32,
              108,
              111,
              99,
              97,
              108,
              108,
              121,
              45,
              115,
              111,
              117,
              114,
              99,
              101,
              100,
              32,
              98,
              101,
              97,
              110,
              115,
              46,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              49,
              56,
              58,
              51,
              57,
              58,
              52,
              56,
              46,
              55,
              55,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 99,
          "responseSize": 490
        },
        "id": "77c8049e-ac12-46eb-aa7b-42fa2044ad45",
        "assertions": [
          {
            "assertion": "Response time is less than 2000ms",
            "skipped": false
          },
          {
            "assertion": "Response has correct Content-Type",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Tenant was deleted",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 14718
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "038be206c0db0b88cce0569cd05d99e8",
          "id": "9c3be2db-5cb5-4fe1-baa9-f51c839a5a5a",
          "timestamp": 1754332789798,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
          "name": "Create Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    console.log('No gymTenantId found, attempting to get one...');",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "                console.log('Set gymTenantId to:', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    ",
                  "    // Store user ID for subsequent requests",
                  "    pm.environment.set('gymUserId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"User belongs to gym tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                  "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                  "});",
                  "",
                  "pm.test(\"Business data contains gym-specific info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                  "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                  "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                  "});"
                ],
                "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42355e32-b7ad-4d7b-9895-f54585f3ea48",
          "scriptId": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
          "execution": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has user ID",
          "message": "expected { …(3) } to have property 'id'",
          "stack": "AssertionError: expected { …(3) } to have property 'id'\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "2bf0b8b21f4ef9f3a7e699abddba6427",
          "id": "c232f67c-dfa0-456d-8318-54a6983cdb76",
          "timestamp": 1754332789800,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
          "name": "Create Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    console.log('No gymTenantId found, attempting to get one...');",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "                console.log('Set gymTenantId to:', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    ",
                  "    // Store user ID for subsequent requests",
                  "    pm.environment.set('gymUserId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"User belongs to gym tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                  "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                  "});",
                  "",
                  "pm.test(\"Business data contains gym-specific info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                  "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                  "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                  "});"
                ],
                "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42355e32-b7ad-4d7b-9895-f54585f3ea48",
          "scriptId": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
          "execution": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 2,
          "test": "User belongs to gym tenant",
          "message": "Cannot read properties of undefined (reading 'category')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'category')\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "3e479e1cdc3bb85946c058a22658d7bb",
          "id": "fe57d571-dfd8-493d-95fa-43b934899c43",
          "timestamp": 1754332789801,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
          "name": "Create Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    console.log('No gymTenantId found, attempting to get one...');",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "                console.log('Set gymTenantId to:', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    ",
                  "    // Store user ID for subsequent requests",
                  "    pm.environment.set('gymUserId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"User belongs to gym tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                  "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                  "});",
                  "",
                  "pm.test(\"Business data contains gym-specific info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                  "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                  "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                  "});"
                ],
                "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42355e32-b7ad-4d7b-9895-f54585f3ea48",
          "scriptId": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
          "execution": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Business data contains gym-specific info",
          "message": "expected { …(3) } to have property 'businessData'",
          "stack": "AssertionError: expected { …(3) } to have property 'businessData'\n   at Object.eval sandbox-script.js:4:8)",
          "checksum": "3a34e30a616b07c6d35fbc971f9c864c",
          "id": "bc3121d2-1a01-4403-9d10-bcf43776ec5d",
          "timestamp": 1754332789801,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
          "name": "Create Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    console.log('No gymTenantId found, attempting to get one...');",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "                console.log('Set gymTenantId to:', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    ",
                  "    // Store user ID for subsequent requests",
                  "    pm.environment.set('gymUserId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"User belongs to gym tenant\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                  "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                  "});",
                  "",
                  "pm.test(\"Business data contains gym-specific info\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                  "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                  "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                  "});"
                ],
                "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "42355e32-b7ad-4d7b-9895-f54585f3ea48",
          "scriptId": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
          "execution": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 201",
          "message": "expected response to have status code 201 but got 400",
          "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "8d672ce7ef8bdc7e48c1239daae1474f",
          "id": "dcdeea43-3d2a-44fc-b967-521b0bd79e20",
          "timestamp": 1754332789985,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
          "name": "Create Another Gym Member",
          "request": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have a gymTenantId set",
                  "if (!pm.environment.get('gymTenantId')) {",
                  "    // Get the first GYM tenant as fallback",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const tenants = response.json();",
                  "            if (tenants.length > 0) {",
                  "                pm.environment.set('gymTenantId', tenants[0].id);",
                  "            }",
                  "        }",
                  "    });",
                  "}",
                  "",
                  "// Generate unique email to avoid conflicts",
                  "const timestamp = Date.now();",
                  "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                ],
                "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('gymUserId2', jsonData.id);",
                  "});"
                ],
                "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f24e135d-664f-4c30-b8c5-637030cae8fd",
          "length": 19,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "827fb261-817c-4121-bad4-a469cb86cb9c",
          "scriptId": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
          "execution": "54529086-52ac-4731-adf2-cd23259d78cc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response has user details",
          "message": "expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'",
          "stack": "AssertionError: expected [ { …(13) }, { …(13) }, …(2) ] to have property 'id'\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "4ba3df2f051b2a440460eb8abeb13513",
          "id": "8c765eb9-c333-4c15-a3ca-00358499c5e9",
          "timestamp": 1754332790726,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
          "name": "Get User by ID",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has user details\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('tenant');",
                  "    pm.expect(jsonData).to.have.property('businessData');",
                  "});"
                ],
                "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "815b5174-c0aa-45c1-81bc-ae3aecc93cdb",
          "length": 19,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "9c4774be-eb72-4272-990b-8ea85b67a63a",
          "scriptId": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
          "execution": "e6b95d21-c551-44da-89cc-49e140e7087f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "3ef72f37c1072e5e0e092faa5c9c5553",
          "id": "71274012-53f5-4e1c-af52-482bdf6aabf0",
          "timestamp": 1754332790862,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                  "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                  "});"
                ],
                "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b",
          "length": 19,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "393b067c-aae2-4a32-ac11-2f237558c3b0",
          "scriptId": "3219f666-4c1a-40fb-a445-684cd290c492",
          "execution": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "User was updated",
          "message": "expected undefined to deeply equal '09171111111'",
          "stack": "AssertionError: expected undefined to deeply equal '09171111111'\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "3d4fea1cfc6cd883f46e135b29e75342",
          "id": "b50d3e1e-4869-4cee-9231-8801494271a2",
          "timestamp": 1754332790863,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set",
                  "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                  "    // Get existing users to set IDs",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                  "            if (gymUser) {",
                  "                pm.environment.set('gymUserId', gymUser.id);",
                  "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was updated\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                  "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                  "});"
                ],
                "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
              }
            }
          ]
        },
        "parent": {
          "id": "6440af5c-cea7-4193-a9a2-4ffb630e3694",
          "name": "Users (Gym)",
          "item": [
            {
              "id": "9864c78a-dd36-43a6-80bb-413ee6bcf13a",
              "name": "Create Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser\",\n  \"lastName\": \"Member\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"phoneNumber\": \"09171234567\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Test member for API testing\",\n  \"businessData\": {\n    \"membershipType\": \"Gold\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3523bbad-750d-4aeb-a29a-764b0ff3f26e",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    console.log('No gymTenantId found, attempting to get one...');",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "                console.log('Set gymTenantId to:', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail', 'testuser' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "899a93a7-3a9c-4abd-b417-c23c7cea878b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dcbb9762-39fc-4c20-91e0-d3d54a6b5496",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('lastName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    ",
                      "    // Store user ID for subsequent requests",
                      "    pm.environment.set('gymUserId', jsonData.id);",
                      "});",
                      "",
                      "pm.test(\"User belongs to gym tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.tenant.category).to.eql('GYM');",
                      "    pm.expect(jsonData.tenantId).to.eql(pm.environment.get('gymTenantId'));",
                      "});",
                      "",
                      "pm.test(\"Business data contains gym-specific info\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "    pm.expect(jsonData.businessData).to.have.property('membershipType');",
                      "    pm.expect(jsonData.businessData).to.have.property('startDate');",
                      "    pm.expect(jsonData.businessData).to.have.property('endDate');",
                      "});"
                    ],
                    "_lastExecutionId": "bf5d52be-442c-4c31-82b1-dc910e4d397c"
                  }
                }
              ]
            },
            {
              "id": "647d8f70-582a-4554-a8ae-f0154edb884b",
              "name": "Create Another Gym Member",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tenantId\": \"{{gymTenantId}}\",\n  \"firstName\": \"TestUser2\",\n  \"lastName\": \"Member2\",\n  \"email\": \"{{uniqueEmail2}}\",\n  \"phoneNumber\": \"09189876543\",\n  \"role\": \"GYM_MEMBER\",\n  \"isActive\": true,\n  \"notes\": \"Second test member\",\n  \"businessData\": {\n    \"membershipType\": \"Silver\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2025-12-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Gym access\", \"Group classes\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b408a3aa-4dbc-4e97-86bb-5a4993c4645d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}",
                      "",
                      "// Generate unique email to avoid conflicts",
                      "const timestamp = Date.now();",
                      "pm.environment.set('uniqueEmail2', 'testuser2' + timestamp + '@example.com');"
                    ],
                    "_lastExecutionId": "b27deaee-c252-4dd5-ae73-51c5a5d78655"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5656d6fd-10ec-4595-b14d-ed87d0fce10d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response has user ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.environment.set('gymUserId2', jsonData.id);",
                      "});"
                    ],
                    "_lastExecutionId": "54529086-52ac-4731-adf2-cd23259d78cc"
                  }
                }
              ]
            },
            {
              "id": "a07cc475-db8b-48bd-88eb-fe6467c2df23",
              "name": "Get All Users (Admin)",
              "request": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6f790e2a-057c-48fc-b89a-4401cdc2b4ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response is array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Users have tenant information\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.length > 0) {",
                      "        jsonData.forEach(user => {",
                      "            pm.expect(user).to.have.property('id');",
                      "            pm.expect(user).to.have.property('firstName');",
                      "            pm.expect(user).to.have.property('tenant');",
                      "            pm.expect(user.tenant).to.have.property('name');",
                      "            pm.expect(user.tenant).to.have.property('category');",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "aa6febb2-b76e-41a8-94c7-5d034fa58da8"
                  }
                }
              ]
            },
            {
              "id": "acaaa5e1-40d8-447a-9135-ad17caa73ec3",
              "name": "Get Users by Tenant",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "tenant",
                    "{{gymTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e228e07f-2ca5-457d-b30f-b080489b423d",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have a gymTenantId set",
                      "if (!pm.environment.get('gymTenantId')) {",
                      "    // Get the first GYM tenant as fallback",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/tenants?category=GYM',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const tenants = response.json();",
                      "            if (tenants.length > 0) {",
                      "                pm.environment.set('gymTenantId', tenants[0].id);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "540f2dc2-84fe-4119-9a9d-c9187be3fd9e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "64a6f487-6679-4cfc-a1e4-9ea084afbdbf",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"All users belong to correct tenant\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const expectedTenantId = pm.environment.get('gymTenantId');",
                      "    jsonData.forEach(user => {",
                      "        pm.expect(user.tenantId).to.eql(expectedTenantId);",
                      "    });",
                      "});"
                    ],
                    "_lastExecutionId": "a0df8b0c-d2cb-4ac4-88fe-3c5a8a77e7df"
                  }
                }
              ]
            },
            {
              "id": "6d8498d7-0b44-4169-a530-b0ad4e372b8e",
              "name": "Get User by ID",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2f02412c-7ffd-4140-b7d2-9acfd80261cb",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "dcc042bd-f69b-4f47-a996-54bdeff45024"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e4e6e723-fcfe-4453-a6b7-178f9a6cae09",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response has user details\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "    pm.expect(jsonData).to.have.property('firstName');",
                      "    pm.expect(jsonData).to.have.property('tenant');",
                      "    pm.expect(jsonData).to.have.property('businessData');",
                      "});"
                    ],
                    "_lastExecutionId": "e6b95d21-c551-44da-89cc-49e140e7087f"
                  }
                }
              ]
            },
            {
              "id": "f4519902-2d52-4b37-8bbf-10ea4dbf57b3",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"09171111111\",\n  \"notes\": \"Updated: VIP member with premium access\",\n  \"businessData\": {\n    \"membershipType\": \"Platinum\",\n    \"startDate\": \"2025-08-03T00:00:00.000Z\",\n    \"endDate\": \"2026-08-03T00:00:00.000Z\",\n    \"planFeatures\": [\"Pool access\", \"Personal trainer\", \"Locker\", \"Nutrition counseling\", \"Spa access\"]\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a475d375-bed2-45f0-a7d7-d7dcd2f19cce",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set",
                      "if (!pm.environment.get('gymTenantId') || !pm.environment.get('gymUserId')) {",
                      "    // Get existing users to set IDs",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUser = users.find(u => u.tenant.category === 'GYM');",
                      "            if (gymUser) {",
                      "                pm.environment.set('gymUserId', gymUser.id);",
                      "                pm.environment.set('gymTenantId', gymUser.tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ba7734aa-b5ca-4f33-b100-715ec60b4d53"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3219f666-4c1a-40fb-a445-684cd290c492",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was updated\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.phoneNumber).to.eql('09171111111');",
                      "    pm.expect(jsonData.businessData.membershipType).to.eql('Platinum');",
                      "});"
                    ],
                    "_lastExecutionId": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b",
          "length": 19,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "393b067c-aae2-4a32-ac11-2f237558c3b0",
          "scriptId": "3219f666-4c1a-40fb-a445-684cd290c492",
          "execution": "d7bb1ccc-a256-4c37-99a9-e24b265c1752"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "6a561bb9c00d9dee2a7872cecdaa77d2",
          "id": "695f3806-0096-420f-9ea6-b05223705ae4",
          "timestamp": 1754332791676,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
          "name": "Delete Test User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId2}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set for deletion",
                  "if (!pm.environment.get('gymUserId2')) {",
                  "    // Get existing users to set ID for second user",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                  "            if (gymUsers.length > 1) {",
                  "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                  "            } else if (gymUsers.length > 0) {",
                  "                // Fallback to first user if only one exists",
                  "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was deleted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
              }
            }
          ]
        },
        "parent": {
          "id": "ef26aa3f-2910-4087-a302-46973df3c33a",
          "name": "Cleanup",
          "item": [
            {
              "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
              "name": "Delete Test User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId2}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set for deletion",
                      "if (!pm.environment.get('gymUserId2')) {",
                      "    // Get existing users to set ID for second user",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                      "            if (gymUsers.length > 1) {",
                      "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                      "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                      "            } else if (gymUsers.length > 0) {",
                      "                // Fallback to first user if only one exists",
                      "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                      "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was deleted\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
                  }
                }
              ]
            },
            {
              "id": "77c8049e-ac12-46eb-aa7b-42fa2044ad45",
              "name": "Delete Test Tenant",
              "request": {
                "url": {
                  "path": [
                    "tenants",
                    "{{coffeeShopTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "66cbec8d-c69a-4ccc-8f41-3563f564e7e4",
                    "type": "text/javascript",
                    "exec": [
                      "// Skip this test if we don't have a coffee shop tenant to delete",
                      "if (!pm.environment.get('coffeeShopTenantId')) {",
                      "    console.log('No coffeeShopTenantId found, skipping deletion test');",
                      "    pm.execution.skipRequest();",
                      "}"
                    ],
                    "_lastExecutionId": "0b6e198d-9bb3-471b-8126-01d90f962fa1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "95c48d5b-f3f1-4d71-9e63-2bd569587fb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Tenant was deleted\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0bea9d64-9121-4216-8a68-62b54545e95d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "26dde85e-6f06-41a0-b51e-c54cc4490399",
          "length": 19,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15401088-a06f-43a5-a987-c72f4f47cb99",
          "scriptId": "f1ec9ab4-9047-4b92-930b-b615134b251a",
          "execution": "371d84b9-0f38-4116-9091-7def78a4fc21"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "User was deleted",
          "message": "expected { …(3) } to have property 'id'",
          "stack": "AssertionError: expected { …(3) } to have property 'id'\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "f33b493535a7ed55d4722919ca47fb77",
          "id": "dded4ed5-e3c2-451a-b65c-3dc92238ec48",
          "timestamp": 1754332791677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
          "name": "Delete Test User",
          "request": {
            "url": {
              "path": [
                "users",
                "{{gymUserId2}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-tenant-id",
                "value": "{{gymTenantId}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                "type": "text/javascript",
                "exec": [
                  "// Ensure we have necessary IDs set for deletion",
                  "if (!pm.environment.get('gymUserId2')) {",
                  "    // Get existing users to set ID for second user",
                  "    pm.sendRequest({",
                  "        url: pm.environment.get('baseUrl') + '/users',",
                  "        method: 'GET'",
                  "    }, function (err, response) {",
                  "        if (!err && response.code === 200) {",
                  "            const users = response.json();",
                  "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                  "            if (gymUsers.length > 1) {",
                  "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                  "            } else if (gymUsers.length > 0) {",
                  "                // Fallback to first user if only one exists",
                  "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                  "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                  "            }",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User was deleted\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "});"
                ],
                "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
              }
            }
          ]
        },
        "parent": {
          "id": "ef26aa3f-2910-4087-a302-46973df3c33a",
          "name": "Cleanup",
          "item": [
            {
              "id": "782433d0-b3ca-4ee1-a399-955ace3f2653",
              "name": "Delete Test User",
              "request": {
                "url": {
                  "path": [
                    "users",
                    "{{gymUserId2}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-tenant-id",
                    "value": "{{gymTenantId}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b8f65902-5a0f-43f2-a445-f95fc1f881d9",
                    "type": "text/javascript",
                    "exec": [
                      "// Ensure we have necessary IDs set for deletion",
                      "if (!pm.environment.get('gymUserId2')) {",
                      "    // Get existing users to set ID for second user",
                      "    pm.sendRequest({",
                      "        url: pm.environment.get('baseUrl') + '/users',",
                      "        method: 'GET'",
                      "    }, function (err, response) {",
                      "        if (!err && response.code === 200) {",
                      "            const users = response.json();",
                      "            const gymUsers = users.filter(u => u.tenant.category === 'GYM');",
                      "            if (gymUsers.length > 1) {",
                      "                pm.environment.set('gymUserId2', gymUsers[1].id);",
                      "                pm.environment.set('gymTenantId', gymUsers[1].tenantId);",
                      "            } else if (gymUsers.length > 0) {",
                      "                // Fallback to first user if only one exists",
                      "                pm.environment.set('gymUserId2', gymUsers[0].id);",
                      "                pm.environment.set('gymTenantId', gymUsers[0].tenantId);",
                      "            }",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "68366eec-3438-439a-91e3-c34254d2f076"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f1ec9ab4-9047-4b92-930b-b615134b251a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"User was deleted\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "371d84b9-0f38-4116-9091-7def78a4fc21"
                  }
                }
              ]
            },
            {
              "id": "77c8049e-ac12-46eb-aa7b-42fa2044ad45",
              "name": "Delete Test Tenant",
              "request": {
                "url": {
                  "path": [
                    "tenants",
                    "{{coffeeShopTenantId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "66cbec8d-c69a-4ccc-8f41-3563f564e7e4",
                    "type": "text/javascript",
                    "exec": [
                      "// Skip this test if we don't have a coffee shop tenant to delete",
                      "if (!pm.environment.get('coffeeShopTenantId')) {",
                      "    console.log('No coffeeShopTenantId found, skipping deletion test');",
                      "    pm.execution.skipRequest();",
                      "}"
                    ],
                    "_lastExecutionId": "0b6e198d-9bb3-471b-8126-01d90f962fa1"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "95c48d5b-f3f1-4d71-9e63-2bd569587fb5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Tenant was deleted\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('id');",
                      "});"
                    ],
                    "_lastExecutionId": "0bea9d64-9121-4216-8a68-62b54545e95d"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "26dde85e-6f06-41a0-b51e-c54cc4490399",
          "length": 19,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15401088-a06f-43a5-a987-c72f4f47cb99",
          "scriptId": "f1ec9ab4-9047-4b92-930b-b615134b251a",
          "execution": "371d84b9-0f38-4116-9091-7def78a4fc21"
        }
      }
    ],
    "error": null
  },
  "consoleLogs": {
    "4ed21e0c-9bec-4872-b5b8-2dc86646b896": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 19,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4ed21e0c-9bec-4872-b5b8-2dc86646b896",
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "8c0a0ee4-0377-4ebc-8fb2-995048fa3ff7"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/"
        ]
      }
    ],
    "de9f7dd2-cb36-4fbb-8ac4-f3a40356b0d1": [
      {
        "cursor": {
          "ref": "de9f7dd2-cb36-4fbb-8ac4-f3a40356b0d1",
          "length": 19,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "2d905f9c-0e24-48db-9e0e-0c45326f6653"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants"
        ]
      }
    ],
    "47768910-a729-4c0f-b2ab-fa8c4b8aab23": [
      {
        "cursor": {
          "ref": "47768910-a729-4c0f-b2ab-fa8c4b8aab23",
          "length": 19,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "562bed29-f786-4666-8a90-699168e95013"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants"
        ]
      }
    ],
    "7f7a8913-9ec4-4805-a7e1-10e9abf79d4d": [
      {
        "cursor": {
          "ref": "7f7a8913-9ec4-4805-a7e1-10e9abf79d4d",
          "length": 19,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "21d3bccc-427f-4e7b-a5bf-96489ad00412"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants"
        ]
      }
    ],
    "3c3f93ae-2875-48c1-bbbe-e69e04cd221d": [
      {
        "cursor": {
          "ref": "3c3f93ae-2875-48c1-bbbe-e69e04cd221d",
          "length": 19,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "f7282b18-345b-4136-a672-b05e091ec26e"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants?category=GYM"
        ]
      }
    ],
    "be19b526-5424-4cd3-b627-c52ed079926a": [
      {
        "cursor": {
          "ref": "be19b526-5424-4cd3-b627-c52ed079926a",
          "length": 19,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "8a367bf6-7488-4d64-9dca-c137d471c855"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants/{{gymTenantId}}"
        ]
      }
    ],
    "2afe5b56-1887-4818-b958-5f32b147d76f": [
      {
        "cursor": {
          "ref": "2afe5b56-1887-4818-b958-5f32b147d76f",
          "length": 19,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "3c11a521-e9ad-4ba1-9f99-8aec8d359ea8"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants/{{gymTenantId}}"
        ]
      }
    ],
    "fe148f28-edc9-45eb-b41e-e4c226520bf8": [
      {
        "cursor": {
          "ref": "fe148f28-edc9-45eb-b41e-e4c226520bf8",
          "length": 19,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "62d6066f-18bf-490d-a5aa-9425163c9c00"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "f24e135d-664f-4c30-b8c5-637030cae8fd": [
      {
        "cursor": {
          "ref": "f24e135d-664f-4c30-b8c5-637030cae8fd",
          "length": 19,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "9366c042-a76f-4fd4-b4c4-fd0d5d4bf233"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "e7c9c9e6-2cc0-48dc-acad-aeff16bf1c7b": [
      {
        "cursor": {
          "ref": "e7c9c9e6-2cc0-48dc-acad-aeff16bf1c7b",
          "length": 19,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "d576b785-fa2b-4911-a0d2-9d30ea649b6d"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "497b030c-52f6-4e28-a006-c899bcab2123": [
      {
        "cursor": {
          "ref": "497b030c-52f6-4e28-a006-c899bcab2123",
          "length": 19,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "34ad3f4d-f5f1-4c1f-85f5-31d20157f731"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users/tenant/{{gymTenantId}}"
        ]
      }
    ],
    "815b5174-c0aa-45c1-81bc-ae3aecc93cdb": [
      {
        "cursor": {
          "ref": "815b5174-c0aa-45c1-81bc-ae3aecc93cdb",
          "length": 19,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "e347dadc-cc41-4116-a4c2-3b5f652622a2"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users/{{gymUserId}}"
        ]
      }
    ],
    "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b": [
      {
        "cursor": {
          "ref": "fb379cd4-bc19-411c-aeb4-3f8dd5158e2b",
          "length": 19,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "3939394d-12bd-4289-b8fc-a670ff755e77"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users/{{gymUserId}}"
        ]
      }
    ],
    "4091f92f-f2b3-4dfc-8f35-49b84ca6d059": [
      {
        "cursor": {
          "ref": "4091f92f-f2b3-4dfc-8f35-49b84ca6d059",
          "length": 19,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "e0ea67b5-701b-4dba-8028-78904bdb51c7"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "096ed601-ead9-472d-a96e-ddd67c9b4ebd": [
      {
        "cursor": {
          "ref": "096ed601-ead9-472d-a96e-ddd67c9b4ebd",
          "length": 19,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "d801901e-7298-4226-85c1-61618058e9c0"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants/invalid-id"
        ]
      }
    ],
    "eca089c2-c511-490a-8005-65b6bcb123e5": [
      {
        "cursor": {
          "ref": "eca089c2-c511-490a-8005-65b6bcb123e5",
          "length": 19,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "d12038bf-c29d-47a9-8f17-50ecd2608552"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "a2ce1263-78d1-4ae3-9c93-07ed35e328f7": [
      {
        "cursor": {
          "ref": "a2ce1263-78d1-4ae3-9c93-07ed35e328f7",
          "length": 19,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "39c80a71-b67b-4cbb-a51e-615b389c9e11"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users"
        ]
      }
    ],
    "26dde85e-6f06-41a0-b51e-c54cc4490399": [
      {
        "cursor": {
          "ref": "26dde85e-6f06-41a0-b51e-c54cc4490399",
          "length": 19,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "a4f64cb2-76b6-47f5-aa91-825cada7ed06"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/users/{{gymUserId2}}"
        ]
      }
    ],
    "3574bb97-00b4-41ff-be4e-a221379ee0c8": [
      {
        "cursor": {
          "ref": "3574bb97-00b4-41ff-be4e-a221379ee0c8",
          "length": 19,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "scriptId": "851cba12-ac01-4d97-9872-3202169ab80a",
          "execution": "78a95b2e-c780-4501-a1b0-50b3ca9e03f6"
        },
        "level": "log",
        "messages": [
          "Running request to:",
          "{{baseUrl}}/tenants/{{coffeeShopTenantId}}"
        ]
      }
    ]
  }
}