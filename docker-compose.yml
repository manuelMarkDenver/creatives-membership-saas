services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: creatives-saas-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: creatives_saas_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_prod_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d creatives_saas_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: creatives-saas-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # PostgreSQL Database
      DATABASE_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-secure_prod_password_123}@postgres:5432/creatives_saas_prod"
      DIRECT_URL: "postgresql://postgres:${POSTGRES_PASSWORD:-secure_prod_password_123}@postgres:5432/creatives_saas_prod"
      
      # Frontend URL
      FRONTEND_URL: "${FRONTEND_URL:-http://localhost:3000}"
      
      # Node Environment
      NODE_ENV: "production"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Optional: Mount for file uploads if needed
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend Next.js App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:5000/api/v1}
        - NEXT_PUBLIC_API_BYPASS_AUTH=${NEXT_PUBLIC_API_BYPASS_AUTH:-false}
    container_name: creatives-saas-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: "production"
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - backend

  # Redis (Optional - for caching/sessions/rate limiting)
  redis:
    image: redis:7-alpine
    container_name: creatives-saas-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Nginx (Optional - Reverse Proxy for production)
  nginx:
    image: nginx:alpine
    container_name: creatives-saas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    profiles:
      - production  # Only run in production profile

volumes:
  postgres_prod_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: creatives-saas-network
    driver: bridge
